#!/usr/bin/python
# This is an attempt to create a FreeCad macro to create all the parts for my CNC router.
# This steals from my router file heavily. Go there for explanations of why I did things.
        #I'll try to copy over important comments.

#	This should generate geometry for the third version of CNC wood router.
#	(moveable gantry. chain or belt on X and Y, Z is screw)
#	Written by Tony Diethelm
#	I am an American, and think in Inches... 
#	As this is in mm the whole way, I use:
#		25mm whenever I need "about an inch" on something.
#		20mm whenever I need "about 3/4 an inch" on something.
#	tonydiethelm@gmail.com

#P.S. I'm not a programmer by trade, so if this is just horribly ugly, please tell me so. 
#       (but be nice)


#To Do List:
#Check that the table calculations still work. I recently changed them to be 6" instead of 1ft, and it probably wreaked havoc.
#try this with a different size of MDF to see if it still works.
#clean up the math so it doesn't spit out .0000004444455555 stupidity. Perhaps I don't care about this...







#REALLY ROUGH DRAFT, FREECAD STUFF

#make the shape, move it if needed(most don't)
#for each cylinder: make it with offsets, cut it out, recompute.
#for each slidey: make it with offsets, cut it out, recompute.
#move the part to it's final destination
#show the part. 
#save the thing.

#variables needed
#initial part offset, one for each hole, one for each slidey, the whole part offset.
#Hole should have radius, X and Y locations for each hole. Height should be assumed to be MDF.
#Slidey should have length(x), width(y), X and Y offset locations. Height should be assumed to be MDF.

#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#slidies=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)






#ROUGH DRAFT, FREECAD STUFF

#load part module
#create a new document
#Do all the algebra calcs for the parts
#For Each Part.....
# Do the math.
	#Almost all of my pieces are made in points from 0,0 to width(x),height(y). This is not always true.
	#Note, my script assumes width,height is X,Y. FreeCad assumes Length, Width, Height is X,Y,Z.
	#I can just make the part, shift it over to match the script I have already done,
	#then all my holes and slideys match up fine... THEN offset the whole thing. It means an extra
	#move for the initial block... but it also means not having offsets all over the stupid place.
	#go with this......
	
	#Pop all the info into the proper variables

#I need to create a function for this.
    #create a box representing the piece of MDF, correctly sized, at offset.
    #For each cylinder
    	#create a cylinder representing the hole to be drilled, properly placed, with offset.
    	#cut it from the main part. recalculate.
    #For each slidey
        #create a box representing the slidey hole to be cut, properly placed, with offset.
        #cut it from the main part. recalculate.
    #move the part
    #show it on the screen.

#Do I need to rename the part once the function is done to avoid overwriting stuff?
#save it






#ROUGH OUTLINE, NON FREECAD STUFF

# Ask them for their information.
#	assume a router clamp width for future calculations
#	ask router diameter
#	ask Z rod usable travel length
#	ask Z rod diameter
#	ask vac tube diameter
#	ask if the table it's going to sit on is already pre built.
#		Yes)
#			ask for table dimensions. Note that we're assuming they'll bolt the rails onto the table sides.
#			calculate Y rail length.
#		No)
#			ask for X, Y
#	ask Z required distances.
#	ask if they want Z overtravel (to cut the table)
#	calculated constants based on their input, used for later geometry.

#	Draw spindle clamps
#		use router diameter+1mm
#	draw Z motor mount (2)
#	draw Y gantry
#		calculate width from router clamp width
#	draw Y top/bottom pieces (2)
#		calculate length from needed Y-(Y gantry width)
#	draw Y middle piece
#		calculate length from needed Y-(Y gantry width)
#	draw X gantry pieces (2)
#		calculate everything so the router bit sits in the middle of the rail bearings.
#		assume the rail is 50mm thick.
#	draw belt holding pieces (6)
#	If they need a table
#		draw end caps (2)
#		draw outside pieces (2)
#		draw inside pieces (2)
#





# THE ACTUAL SCRIPT, attempting to create geometry and stick it into FreeCAD.

#	Notes:
#	I'm using 3/4" MDF. Theoretically you can use any thickness here, but I haven't tried it.
#	Assume NEMA23 motor mounts
#		60mm wide plate. hole is 38.1mm diameter. mounting holes are 6.43mm from edges. 5mm Hole.
#	hole locations are referenced to center of hole.
#	All nut holes are a Diameter away from the end.
#	This uses V groove 3/8" bearings and American bolts for most everything.
#	Idle rollers are made from bare skate bearings on 8mm bolts.
#       MDF connection uses 1/4" bolts. V groove bearings use 3/8" bolts. Idler rollers use 8mm bolts.
#   I'm using 3/4" L sections from Home Depot/Lowes for my railing. 
#       If you're using something else, change the scripts! Also, I just screwed mine into the wood. 
#       If you want fancy adjustment capability, well... 
#	See each section for assumptions while calculating.
#	Use variables instead of numbers EVERYWHERE.
#	This assumes that the wasted space on XY axes will be used for clamping and the like.
#		If you want more clamping space, put in more XY required distance.
#       I don't want the headache of putting in fudge room on the table. 
#           Everyone will want different fudge room.
#	I assume the table is of equal height with the rails(in the Z direction here for clarification).
#	Z travel assumes a distance from X rail to bottom of Y gantry. Z rail will be able to travel that... 
#		It does not count end mill length or chuck length. Add that in yourself.
#	



import sys




#CHANGE THIS STUFF FOR YOUR MACHINE

# I originally had this stuff as a bunch of inputs/raw_inputs asking questions as a script. It was pointed out to me that it would be better to just have people modify the script to suit them instead of typing things in each time it was ran. Good Advice. I took it. 
# All dimensions are assumed to be in millimeters.
# Ask them for their information.
#	assume a router clamp width for future calculations
#	ask router diameter
#	ask Z rod usable travel length
#	ask Z rod diameter
#	ask vac tube diameter
#	ask if the table it's going to sit on is already pre built.
#		Yes)
#			ask for table dimensions. Note that we're assuming they'll bolt the rails onto the table sides.
#			calculate Y rail length.
#		No)
#			ask for X, Y
#	ask Z required distances.
#	ask if they want Z overtravel (to cut the table)


SpindleClampWidth = 100 #This is the width of the spindle clamp. I should make this calculated from the spindle diameter. I was trying to minimize this to keep Y axis wastage to a minimum.
SpindleDiameter = 65 #If you're using a hand router, and it has different diamters along the Z axis... You'll have to think on your feet here.
ZRodLength = 381 #This is usable Z length, not counting mounting bearings or attachment shaft.
ZRodDiameter = 11.2 #This is the diameter of the screw. I fudge wiggle room on later, so don't do it here.
ZRodBearingDiameter = 24 #This is the diameter of the mounting bearing for the Z rod. 
VacTubeDiameter = 12.0 #I was using a small tube as a vac system. It didn't work well frankly, so you might ignore this. 




Table = "y" #Yes, you already have a table to put the gantry on. You don't need one. change to "n" if you want one and the script will spit out parts for a crappy table. Change the values below too.
if Table == "y":
    TableX = 1474.5 #This is set for my table. This is actual length of the X rail, not cutting length. 
    TableY = 569 #This is set for my table. This is the Y distance between XRail to XRail, not cutting length. 
else: #If you want extra space around your table, ask for it in X and Y travel.
    # I set these to 0 so Python wouldn't wig out. 
    XTravel = 0# How long of X travel do you want?
    YTravel = 0# How long of Y travel do you want?

#Note that the Z travel is assuming a distance between the top of the X rail/table and the Y gantry. 
ZTravel = 25.4*4 #What amount of Z travel (space between X rail height and bit) should there be?
BitAndChuck = 60 #What's the approx length of your bit and chuck? Overestimate.
ZOverTravel = 25.4*6/4 #What amount of Z overtravel (to cut below the X rail line) should there be? This allows you to cut into your own table. I thought it would be nice to be able to custom cut your own table.
XGantryWidth = 25*8 #How wide do you want the X axis Gantry to be? Wider = More Stable of course. I could calculate this, but I thought folks might want to choose this for themselves. 





#FUNCTION FOR FREECAD ATTEMPT. USE THIS IN EACH SECTION TO GENERATE THE SPECIFIC PART.
#I really need to think about how I'm going to do the offsets...

def makethepart(Xlength,Ylength,firstoffset,holes,slideys,secondoffset):
    #make the part, with firstoffset
    thepart = Part.makeBox(lengthx,widthy,MDF,firstoffset)
    #go through all the holes, make 'em with offsets, cut 'em out, etc
    #Notes - hole=[[radius,Xoffset,Yoffset],etc]
    for i in holes:
        #make the cylinder, with offsets
        ahole=Part.makeCylinder(holes[i][0],MDF,FreeCAD.Vector(holes[i][1],holes[i][2],0))
        #cut it out from the main part and recalculate the part
        thepart=thepart.cut(ahole)
        App.ActiveDocument.recompute()
    #go through all the slideys, make 'em with offsets, cut 'em out, etc
    #notes - slidies=[[length,width,Xoffset,Yoffset],etc]
    for i in slidies:
        #make the box, with offsets
        aslidey=Part.makeBox(slidies[i][0],slidies[i][1],MDF,Base.Vector(slidies[i][2],slidies[i][3]))
        #cut it from the main part and recalculate the part.
        thepart=thepart.cut(aslidey)
        App.ActiveDocument.recompute()
    #move the part to the second offset. Show it on the screen.
    thepart.translate(secondoffset)
    Part.show(thepart)

#FUNCTION FOR POPULATING HOLES VARIABLE
    #Notes - holes=[[radius,Xoffset,Yoffset],etc]
    #define it. pass it the name of the variable to go through, the radius needed
    #for each entry in the given variable, append a new list entry to holes consisting of...
    #radius,name[i][0],name[i][1]
    #Note! since this will have multiple entries, need to extend this to holes outside the function
def populateholes(name,radius):
    thingy=[]
    for i in name:
        thingy.append([radius,name[i][0],name[i][1]])
    return thingy

#FUNCTION FOR POPULATING SLIDIES VARIABLE
    #Notes - slidies=[[length,width,Xoffset,Yoffset],etc]
    #define it. pass it the name of the variable to go through and the number of entries it has.
        #I'm lazy, and don't want to do the math.
    #for each odd entry in the given variable, append a new list entry to slidies consisting of...
    #name[i+1][0]-name[i][0],name[i+1][1]-name[i][1],name[i][0],name[i][1] 
    #Note! since this will have multiple entries, need to extend this to holes outside the function
def populateslidies(name):
    thingy = []
    for i in range(0,len(name),2):
        thingy.append([name[i+1][0]-name[i][0],name[i+1][1]-name[i][1],name[i][0],name[i][1]])
    return thingy






#PURE NOTES TO COPY INTO EACH SECTION SO I DON'T HAVE TO KEEP LOOKING UP FOR FUNCTION DEFINITIONS, ETC.
#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#slidies=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)
#populateholes(name,radius)
#populateslidies(name)
#makethepart(Xlength,Ylength,firstoffset,holes,slideys,secondoffset)








# Set up the constants
# These are all the things that will probably not change from machine to machine. Definitions, MDF sizes, Rail sizes, etc.
QuarterInch = 6.35
ThreeQuarterInch = 19.05
ThreeEighthsInch = 9.525
BoltRadius = QuarterInch/2
BearingBoltRadius = ThreeEighthsInch/2
MDF = ThreeQuarterInch
Rail = ThreeQuarterInch  #I use 3/4" L bracket from Home Depot/Lowes.
NutHoleRadius = 25.4/2
NutHoleOffset = NutHoleRadius*2
BearingDiameter = 30.73 #From spec sheet
BearingRadius = BearingDiameter/2
BearingAssyToRail = 14.3 #Measured by Tony. Badly
BearingRadiusPlusRail = 32.4 #Measured by Tony. Badly. 
IdlerPulleyDiameter = 28 #Measured by Tony. Badly
PulleyRadius = 8 #Measured by Tony. Badly
Nema23MotorMount = 60
SkateBearingDiameter = 22
SkateBearingRadius = SkateBearingDiameter/2
SkateBearingBoltDiameter = 8
SkateBearingBoltRadius = 4


# These are soft constants. 
#They probably won't change, but might. If you want more room to put in the X motor for example, you could increase the height of the Y rail. Perhaps you might want to make the nutholder thinner to save room on the Y axis. Perhaps you want more spring space. Dunno...
YRailHeight = 120 #This is the width of the piece that the Y rails sit on. 
YRailDepth = 80
NutHolder = 60 # The nutholder space is the space with the two vertical slits on the Y gantry. 
NutHolder = 75 #why did I do this? sigh... This was the one that went into my machine. It can definately be made smaller, which will save wasted Y space. 
FudgeFactor = 5 #I used this around edges to give myself some room. 
SpringSpace = 15 #Note, this is to give some room for the compressed spring, and is NOT indicative of how large the slidey hole will be. Slidey holes are usually twice spring space.
XRailThickness = 50 #This is thickness of the piece of wood the X rails sits on. You'll definately want to change this for your machine. 





# calculated constants
# 
ZRodHoleDiameter = ZRodDiameter+10  #Wiggle Room
# note that Z rail length needs to be long enough for the lead screw or it'll poke out the bottom. No Bueno!
ZRailLength = SpringSpace + (BearingDiameter/2 + BearingRadiusPlusRail)*2 + YRailHeight + BitAndChuck + ZTravel + ZOverTravel
if ZRodLength > ZRailLength:
	ZRailLength = ZRodLength




#Y gantry calculations
#left to right
YGantryWidth = FudgeFactor + BearingDiameter + NutHolder + BearingRadius + BearingRadiusPlusRail + SpindleClampWidth + BearingRadius + BearingRadiusPlusRail + SpringSpace + FudgeFactor + BearingDiameter + FudgeFactor
#bottom to top
YGantryHeight = FudgeFactor + SpringSpace + BearingRadiusPlusRail + YRailHeight + BearingRadiusPlusRail + BearingRadius + FudgeFactor+ Nema23MotorMount + FudgeFactor + SkateBearingDiameter + FudgeFactor
# X and Y locations for the rail bearings
YGantryTopBearingY = FudgeFactor + SpringSpace + BearingRadiusPlusRail + YRailHeight + BearingRadiusPlusRail
YGantryBottomBearingY = FudgeFactor + SpringSpace
YGantryZRollerX = FudgeFactor +BearingDiameter + NutHolder + BearingRadius
YGantryZSlideyX = YGantryZRollerX + BearingRadiusPlusRail + SpindleClampWidth + BearingRadiusPlusRail
YGantryLeftRollerX = FudgeFactor + BearingRadius
YGantryRightRollerX = YGantryWidth - FudgeFactor - BearingRadius



# X gantry calculations
#bottom to top
XGantryHeight = FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + Rail + ZTravel + BitAndChuck + YRailHeight + BearingRadiusPlusRail + BearingRadius + FudgeFactor+ Nema23MotorMount + FudgeFactor + SkateBearingDiameter + FudgeFactor
#left to right
XGantryWidth = YRailDepth + MDF + BearingAssyToRail + MDF + MDF + NutHoleOffset + NutHoleRadius*2 + FudgeFactor + SpindleDiameter/2 + FudgeFactor
#positions for the X rail bearings, top and bottom, X and Y
XGantryTopBearingY = FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + BearingRadiusPlusRail
XGantryBearingXLeft = FudgeFactor + BearingBoltRadius
XGantryBearingXRight = XGantryWidth - FudgeFactor - BearingBoltRadius
XGantryBottomBearingY = FudgeFactor + SpringSpace
#This is the lower right corner of the Y rail atachments, for easy calculations later.
XGantryLowerRightYRailCorner = [FudgeFactor+YRailDepth + MDF, FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + Rail + ZTravel + BitAndChuck]
#I need these to calculate where the holes go on the table endcaps and the X gantry
MiddleOfXRail = XGantryTopBearingY-BearingRadiusPlusRail-XRailThickness/2
# these are locations for the holes for the Y belts. Belts should go through these holes and fold down.
# Make the holes go up from this location.
MotorBeltHole = [XGantryLowerRightYRailCorner[0],XGantryLowerRightYRailCorner[1]+YRailHeight+BearingRadiusPlusRail+BearingRadius+FudgeFactor+Nema23MotorMount/2-PulleyRadius]
TightenerBeltHole = [XGantryLowerRightYRailCorner[0],XGantryHeight-FudgeFactor]




if Table == "y":
	YRailLength = TableY + (BearingAssyToRail*2)
else:
	YRailLength = YTravel + YGantryWidth


#SpindleClampLength = 10+FudgeFactor+SpindleDiameter+FudgeFactor+NutHoleRadius+FudgeFactor+NutHoleOffset
SpindleClampLength = 20+FudgeFactor+SpindleDiameter+FudgeFactor+NutHoleRadius+FudgeFactor+NutHoleOffset




#DO ALL THE PIECES


#SPINDLE CLAMPS

#		space for clamping bolt is 25mm

SpindleClampCorner = [[0,0] , [SpindleClampWidth,SpindleClampLength]]

SpindleClampNutHoles = [[SpindleClampCorner[0][0]+NutHoleOffset,SpindleClampCorner[0][1]+NutHoleOffset] , \
           		[SpindleClampCorner[1][0]-NutHoleOffset,SpindleClampCorner[0][1]+NutHoleOffset]] 

SpindleHoleLocation = [SpindleClampWidth/2,SpindleClampCorner[1][1]-10-FudgeFactor-(SpindleDiameter/2)] 

TightenerSpace = [[SpindleClampCorner[0][0],SpindleClampCorner[1][1]-25],\
                  [SpindleClampCorner[0][0]+25,SpindleClampCorner[1][1]],\
                  [SpindleClampCorner[1][0]-25,SpindleClampCorner[1][1]-25],\
                  [SpindleClampCorner[1][0],SpindleClampCorner[1][1]]]

SqueezyBit = [[SpindleClampCorner[1][0]/2-5,SpindleClampCorner[0][1]+15],\
              [SpindleClampCorner[1][0]/2+5,SpindleClampCorner[1][1]]]

#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#slidies=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)
#populateholes(name,radius)
#populateslidies(name)
#makethepart(Xlength,Ylength,firstoffset,holes,slideys,secondoffset)


#set up inputs to FreeCAD function
firstoffset = FreeCAD.Vector(0,0,0)
secondoffset = FreeCAD.Vector(1000,0,0)
Xlength=SpindleClampWidth
Ylength=SpindleClampLength
#holes=[[radius,Xoffset,Yoffset],etc]
holes=[]
holes.extend(populateholes(SpindleClampNutHoles,NutHoleRadius))
holes.append(populateholes(SpindleHoleLocation,SpindleDiameter/2))
#slidies=[[length,width,Xoffset,Yoffset],etc]
slidies=[]
slidies.extend(populateslidies(TightenerSpace))
slidies.append(populateslidies(SqueezyBit))
#make the part
makethepart(Xlength,Ylength,firstoffset,holes,slidies,secondoffset)

#Fuck I hope this works...
