#!/usr/bin/python
# This is an attempt to create a FreeCad macro to create all the parts for my CNC router.
# This steals from my router file heavily. Go there for explanations of why I did things.
        #I'll try to copy over important comments.

#	This should generate geometry for the third version of CNC wood router.
#	(moveable gantry. chain or belt on X and Y, Z is screw)
#	Written by Tony Diethelm
#	I am an American, and think in Inches... 
#	As this is in mm the whole way, I use:
#		25mm whenever I need "about an inch" on something.
#		20mm whenever I need "about 3/4 an inch" on something.
#	tonydiethelm@gmail.com

#P.S. I'm not a programmer by trade, so if this is just horribly ugly, please tell me so. 
#       (but be nice)


#To Do List:
# shorten up the nut holder, but not THAT short. get rid of the bolt hole, it's not needed. 
#Note, If I ever do put the Y axis on the inside, it'll shorten everything up, yes it will... might also interfere with z axis bolts. maybe.... maybe not actually, now that I look at it. 

#try this with a different size of MDF to see if it still works. Seems to.
#clean up the math so it doesn't spit out .0000004444455555 stupidity. Perhaps I don't care about this...
#create beveling so the bolt heads don't stick out.
#create a vac attachment







#REALLY ROUGH DRAFT, FREECAD STUFF

#make the shape, move it if needed(most don't)
#for each cylinder: make it with offsets, cut it out, recompute.
#for each slidey: make it with offsets, cut it out, recompute.
#move the part to it's final destination
#show the part. 
#save the thing.

#variables needed
#initial part offset, one for each hole, one for each slidey, the whole part offset.
#Hole should have radius, X and Y locations for each hole. Height should be assumed to be MDF.
#Slidey should have length(x), width(y), X and Y offset locations. Height should be assumed to be MDF.

#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#cutouts=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)






#ROUGH DRAFT, FREECAD STUFF

#load part module
#create a new document
#Do all the algebra calcs for the parts
#For Each Part.....
# Do the math.
	#Almost all of my pieces are made in points from 0,0 to width(x),height(y). This is not always true.
	#Note, my script assumes width,height is X,Y. FreeCad assumes Length, Width, Height is X,Y,Z.
	#I can just make the part, shift it over to match the script I have already done,
	#then all my holes and cutouts match up fine... THEN offset the whole thing. It means an extra
	#move for the initial block... but it also means not having offsets all over the stupid place.
	#go with this......
	
	#Pop all the info into the proper variables

#I need to create a function for this.
    #create a box representing the piece of MDF, correctly sized, at offset.
    #For each cylinder
    	#create a cylinder representing the hole to be drilled, properly placed, with offset.
    	#cut it from the main part. recalculate.
    #For each slidey
        #create a box representing the slidey hole to be cut, properly placed, with offset.
        #cut it from the main part. recalculate.
    #move the part
    #show it on the screen.

#Do I need to rename the part once the function is done to avoid overwriting stuff?
#save it






#ROUGH OUTLINE, NON FREECAD STUFF

# Ask them for their information.
#	assume a router clamp width for future calculations
#	ask router diameter
#	ask Z rod usable travel length
#	ask Z rod diameter
#	ask vac tube diameter
#	ask if the table it's going to sit on is already pre built.
#		Yes)
#			ask for table dimensions. Note that we're assuming they'll bolt the rails onto the table sides.
#			calculate Y rail length.
#		No)
#			ask for X, Y
#	ask Z required distances.
#	ask if they want Z overtravel (to cut the table)
#	calculated constants based on their input, used for later geometry.

#	Draw spindle clamps
#		use router diameter+1mm
#	draw Z motor mount (2)
#	draw Y gantry
#		calculate width from router clamp width
#	draw Y top/bottom pieces (2)
#		calculate length from needed Y-(Y gantry width)
#	draw Y middle piece
#		calculate length from needed Y-(Y gantry width)
#	draw X gantry pieces (2)
#		calculate everything so the router bit sits in the middle of the rail bearings.
#		assume the rail is 50mm thick.
#	draw belt holding pieces (6)
#	If they need a table
#		draw end caps (2)
#		draw outside pieces (2)
#		draw inside pieces (2)
#





# THE ACTUAL SCRIPT, attempting to create geometry and stick it into FreeCAD.

#	Notes:
#	I'm using 3/4" MDF. Theoretically you can use any thickness here, but I haven't tried it.
#	Assume NEMA23 motor mounts
#		60mm wide plate. hole is 38.1mm diameter. mounting holes are 6.43mm from edges. 5mm Hole.
#	hole locations are referenced to center of hole.
#	All nut holes are a Diameter away from the end.
#	This uses V groove 3/8" bearings and American bolts for most everything.
#	Idle rollers are made from bare skate bearings on 8mm bolts.
#       MDF connection uses 1/4" bolts. V groove bearings use 3/8" bolts. Idler rollers use 8mm bolts.
#   I'm using 3/4" L sections from Home Depot/Lowes for my railing. 
#       If you're using something else, change the scripts! Also, I just screwed mine into the wood. 
#       If you want fancy adjustment capability, well... 
#	See each section for assumptions while calculating.
#	Use variables instead of numbers EVERYWHERE.
#	This assumes that the wasted space on XY axes will be used for clamping and the like.
#		If you want more clamping space, put in more XY required distance.
#       I don't want the headache of putting in fudge room on the table. 
#           Everyone will want different fudge room.
#	I assume the table is of equal height with the rails(in the Z direction here for clarification).
#	Z travel assumes a distance from X rail to bottom of Y gantry. Z rail will be able to travel that... 
#		It does not count end mill length or chuck length. Add that in yourself.
#	



import sys

# SET UP THE CONSTANTS
# These are all the things that will probably not change from machine to machine. Definitions, Rail sizes, etc.
QuarterInch = 6.35
ThreeQuarterInch = 19.05
ThreeEighthsInch = 9.525
BoltRadius = QuarterInch/2
BearingBoltRadius = ThreeEighthsInch/2
Rail = ThreeQuarterInch  #I use 3/4" L bracket from Home Depot/Lowes.
NutHoleRadius = 25.4/2
NutHoleOffset = NutHoleRadius*2
BearingDiameter = 30.73 #From spec sheet
BearingRadius = BearingDiameter/2
BearingAssyToRail = 14.3 #Measured by Tony. Badly
BearingRadiusPlusRail = 32.4 #Measured by Tony. Badly. 
IdlerPulleyDiameter = 28 #Measured by Tony. Badly
PulleyRadius = 8 #Measured by Tony. Badly
Nema24MotorMount = 60
Nema23MotorMount = 57
Nema17MotorMount = 42.3
NemaMotorMount = Nema24MotorMount
SkateBearingDiameter = 22
SkateBearingRadius = SkateBearingDiameter/2
SkateBearingBoltDiameter = 8
SkateBearingBoltRadius = 4


#CHANGE THIS STUFF FOR YOUR MACHINE

# I originally had this stuff as a bunch of inputs/raw_inputs asking questions as a script. It was pointed out to me that it would be better to just have people modify the script to suit them instead of typing things in each time it was ran. Good Advice. I took it. 
# All dimensions are assumed to be in millimeters.
# Ask them for their information.
#	assume a router clamp width for future calculations
#	ask router diameter
#	ask Z rod usable travel length
#	ask Z rod diameter
#	ask vac tube diameter
#	ask if the table it's going to sit on is already pre built.
#		Yes)
#			ask for table dimensions. Note that we're assuming they'll bolt the rails onto the table sides.
#			calculate Y rail length.
#		No)
#			ask for X, Y
#	ask Z required distances.
#	ask if they want Z overtravel (to cut the table)

MDF = 19.05 #What size MDF are you using? 12.7 is 1/2". 19.05 is 3/4". 25.4" is 1".
#SpindleClampWidth = 100 #This is the width of the spindle clamp. I was doing this manually, now is calculated below. 
SpindleDiameter = 65.0 #If you're using a hand router, and it has different diameters along the Z axis... You'll have to think on your feet here.
ZRodLength = 381.0 #This is usable Z length, not counting mounting bearings or attachment shaft.
ZRodDiameter = 11.2 #This is the diameter of the screw. I fudge wiggle room on later, so don't do it here.
ZRodBearingDiameter = 24.0 #This is the diameter of the mounting bearing for the Z rod. 





Table = "yup" #Yup, you already have a table to put the gantry on. You don't need one. change to "nope" if you want one and the script will spit out parts for a crappy table. Change the values below too.
if Table == "yup":
    TableX = 1474.5 #This is set for my table. This is actual length of the X rail, not cutting length. 
    TableY = 569.0 #This is set for my table. This is the Y distance between XRail to XRail, not cutting length. 
else: #If you want extra space around your table, ask for it in X and Y travel.
    # I set these to 0 so Python wouldn't wig out. 
    XTravel = 25.4*12*1# How long of X travel do you want?
    YTravel = 25.4*10*1# How long of Y travel do you want?

#Note that the Z travel is assuming a distance between the top of the X rail/table and the Y gantry. 
ZTravel = 25.4*4 #What amount of Z travel (space between X rail height and bit) should there be?
#BitAndChuck = 60 #What's the approx length of your bit and chuck? Overestimate. Don't need this. Slide up the Z rail to make extra room.
ZOverTravel = 25.4*6/4 #What amount of Z overtravel (to cut below the X rail line) should there be? This allows you to cut into your own table. I thought it would be nice to be able to custom cut your own table.
#XGantryWidth = 25*8 #How wide do you want the X axis Gantry to be? This is calulated below in the X gantry calcs. I'm leaving it here so I can specify it myself if I want to. 






# THESE ARE SOFT CONSTANTS
 
#They probably won't change, but might. If you want more room to put in the X motor for example, you could increase the height of the Y rail. Perhaps you might want to make the nutholder thinner to save room on the Y axis. Perhaps you want more spring space. Dunno...

NutHolder = 15 #Shaved down from 75. Only room for one slidey cutout now. 
FudgeFactor = 5 #I used this around edges to give myself some room. 
SpringSpace = 15 #Note, this is to give some room for the compressed spring, and is NOT indicative of how large the slidey hole will be. Slidey holes are usually twice spring space.
XRailThickness = 50 #This is thickness of the piece of wood the X rails sits on. You'll definately want to change this for your machine if you're bolting rails to a table for example.





# CALCULATED CONSTANTS

#Should never be less than NutHoleRadius*3+FudgeFactor*3+NutHoleRadius*3, or the holes will be stupid. 
SpindleClampWidth = SpindleDiameter + (2.0*10.0)
if SpindleClampWidth < NutHoleRadius*3+FudgeFactor*3+NutHoleRadius*3:
    SpindleClampWidth = NutHoleRadius*3+FudgeFactor*3+NutHoleRadius*3

YRailHeight = MDF+NemaMotorMount+FudgeFactor*2+MDF #This is the width of the piece that the Y rails sit on. 
YRailDepth = NemaMotorMount+FudgeFactor+NemaMotorMount

ZRodHoleDiameter = ZRodDiameter+10.0  #Wiggle Room
# note that Z rail length needs to be long enough for the lead screw or it'll poke out the bottom. No Bueno!
ZRailLength = SpringSpace + (BearingDiameter/2 + BearingRadiusPlusRail)*2 + YRailHeight + ZTravel + ZOverTravel
if ZRodLength > ZRailLength:
	ZRailLength = ZRodLength




#Y GANTRY CALCULATIONS

#In an attempt to make this skinnier, I am going to move the Y motor mount and slidey cutout over, mount the motor on the other side, and slash the hell out of the nut holder. Nut holder will now be only one slidey cutout and not as tall. 
#taking out the side to side fudgefactors. we don't need them. 

#left to right
YGantryWidth = BearingDiameter+ BearingRadius + BearingRadiusPlusRail + SpindleClampWidth + BearingRadius + BearingRadiusPlusRail + BearingDiameter
#bottom to top
YGantryHeight = FudgeFactor + SpringSpace + BearingRadiusPlusRail + YRailHeight + BearingRadiusPlusRail + BearingRadius + FudgeFactor+ NemaMotorMount + FudgeFactor + SkateBearingDiameter + FudgeFactor
# X and Y locations for the rail bearings
YGantryTopBearingY = FudgeFactor + SpringSpace + BearingRadiusPlusRail + YRailHeight + BearingRadiusPlusRail
YGantryBottomBearingY = FudgeFactor + SpringSpace
YGantryZRollerX = BearingDiameter + BearingRadius
YGantryZSlideyX = YGantryZRollerX + BearingRadiusPlusRail + SpindleClampWidth + BearingRadiusPlusRail
YGantryLeftRollerX = BearingRadius
YGantryRightRollerX = YGantryWidth - BearingRadius



# X GANTRY CALCULATIONS
#bottom to top
#XGantryHeight = FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + Rail + ZTravel + BitAndChuck + YRailHeight + BearingRadiusPlusRail + BearingRadius + FudgeFactor+ NemaMotorMount + FudgeFactor + SkateBearingDiameter + FudgeFactor
XGantryHeight = FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + Rail + ZTravel + YRailHeight + BearingRadiusPlusRail + BearingRadius + FudgeFactor+ NemaMotorMount + FudgeFactor + SkateBearingDiameter + FudgeFactor  #Took out BitAndChuck

#left to right
#This should be wide enough for the Y gantry railings and extend so it goes as far as the bit. 
#You could shorten it of course... Your call. 
XGantryWidth = YRailDepth + MDF + BearingAssyToRail + MDF + MDF + NutHoleOffset + NutHoleRadius*2 + FudgeFactor + SpindleDiameter/2 + FudgeFactor


#positions for the X rail bearings, top and bottom, X and Y
XGantryTopBearingY = FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + BearingRadiusPlusRail
XGantryBearingXLeft = FudgeFactor + BearingBoltRadius
XGantryBearingXRight = XGantryWidth - FudgeFactor - BearingBoltRadius
XGantryBottomBearingY = FudgeFactor + SpringSpace
#This is the lower right corner of the Y rail atachments, for easy calculations later.
#XGantryLowerRightYRailCorner = [FudgeFactor+YRailDepth + MDF, FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + Rail + ZTravel + BitAndChuck]
XGantryLowerRightYRailCorner = [FudgeFactor+YRailDepth + MDF, FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + Rail + ZTravel] #BitAndChuck

#I need these to calculate where the holes go on the table endcaps and the X gantry
MiddleOfXRail = XGantryTopBearingY-BearingRadiusPlusRail-XRailThickness/2
# these are locations for the holes for the Y belts. Belts should go through these holes and fold down.
# Make the holes go up from this location.
MotorBeltHole = [XGantryLowerRightYRailCorner[0],XGantryLowerRightYRailCorner[1]+YRailHeight+BearingRadiusPlusRail+BearingRadius+FudgeFactor+NemaMotorMount/2-PulleyRadius]
TightenerBeltHole = [XGantryLowerRightYRailCorner[0],XGantryHeight-FudgeFactor]

if Table == "yup":
	YRailLength = TableY + (BearingAssyToRail*2)
else:
	YRailLength = YTravel + YGantryWidth

#SpindleClampLength = 10+FudgeFactor+SpindleDiameter+FudgeFactor+NutHoleRadius+FudgeFactor+NutHoleOffset
SpindleClampLength = 20+FudgeFactor+SpindleDiameter+FudgeFactor+NutHoleRadius+FudgeFactor+NutHoleOffset




#FUNCTION FOR FREECAD ATTEMPT. USE THIS IN EACH SECTION TO GENERATE THE SPECIFIC PART.
#I really need to think about how I'm going to do the offsets...

def makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset):
    #make the part, with firstoffset
    thepart = Part.makeBox(Xlength,Ylength,MDF,firstoffset)
    #go through all the holes, make 'em with offsets, cut 'em out, etc
    #Notes - hole=[[radius,Xoffset,Yoffset],etc]
    for i in range(0,len(holes),1):
        #make the cylinder, with offsets
        ahole=Part.makeCylinder(holes[i][0],MDF,FreeCAD.Vector(holes[i][1],holes[i][2],0))
        #cut it out from the main part and recalculate the part
        thepart=thepart.cut(ahole)
        App.ActiveDocument.recompute()
    #go through all the cutouts, make 'em with offsets, cut 'em out, etc
    #notes - cutouts=[[length,width,Xoffset,Yoffset],etc]
    for i in range(0,len(cutouts),1):
        #make the box, with offsets
        aslidey=Part.makeBox(cutouts[i][0],cutouts[i][1],MDF,FreeCAD.Vector(cutouts[i][2],cutouts[i][3]))
        #cut it from the main part and recalculate the part.
        thepart=thepart.cut(aslidey)
        App.ActiveDocument.recompute()
    #move the part to the second offset. Show it on the screen.
    thepart.translate(secondoffset)
    Part.show(thepart)

#FUNCTION FOR POPULATING HOLES VARIABLE
    #Notes - holes=[[radius,Xoffset,Yoffset],etc]
    #define it. pass it the name of the variable to go through, the radius needed
    #for each entry in the given variable, append a new list entry to holes consisting of...
    #radius,name[i][0],name[i][1]
    #Note! since this will have multiple entries, need to extend this to holes outside the function
def populateholes(name,radius):
    thingy=[]
    for i in range(0,len(name),1):
        thingy.append([radius,name[i][0],name[i][1]])
    return thingy

#FUNCTION FOR POPULATING cutouts VARIABLE
    #Notes - cutouts=[[length,width,Xoffset,Yoffset],etc]
    #define it. pass it the name of the variable to go through.
        #I'm lazy, and don't want to do the math.
    #for each odd entry in the given variable, append a new list entry to cutouts consisting of...
    #name[i+1][0]-name[i][0],name[i+1][1]-name[i][1],name[i][0],name[i][1] 
    #Note! since this will have multiple entries, need to extend this to holes outside the function
def populatecutouts(name):
    thingy = []
    for i in range(0,len(name),2):
        thingy.append([name[i+1][0]-name[i][0],name[i+1][1]-name[i][1],name[i][0],name[i][1]])
    return thingy

#FUNCTION FOR INCREASING THE OFFSET
    #pass it which axis to change and the secondoffset variable.
    #if it's going to increase Y, do it by 500mm
    #if it's going to increase X, do it by 1000mm
def increaseoffsets(axis,secondoffset):
    if axis == "x":
        secondoffset = secondoffset + FreeCAD.Vector(500,0,0)
    if axis == "y":
        secondoffset = secondoffset + FreeCAD.Vector(0,500,0)
    return secondoffset





#PURE NOTES TO COPY INTO EACH SECTION SO I DON'T HAVE TO KEEP LOOKING UP FOR FUNCTION DEFINITIONS, ETC.
#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#cutouts=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)
#increaseoffsets(axis,secondoffset)
#populateholes(name,radius)
#populatecutouts(name)
#makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)

#set up inputs to FreeCAD function
#firstoffset already correct from before
#secondoffset = increaseoffsets("x",secondoffset)
#Xlength=
#Ylength=
#Holes
#cutouts
#Make the part
#increase offset and make part again if needed













#DO ALL THE PIECES


#SPINDLE CLAMPS

#space for clamping bolt is 25mm
#I need two of these...



SpindleClampCorner = [[0,0] , [SpindleClampWidth,SpindleClampLength]]

SpindleClampNutHoles = [[SpindleClampCorner[0][0]+NutHoleOffset,SpindleClampCorner[0][1]+NutHoleOffset] , \
           	        	[SpindleClampCorner[1][0]-NutHoleOffset,SpindleClampCorner[0][1]+NutHoleOffset]] 

SpindleHoleLocation = [[SpindleClampWidth/2,SpindleClampCorner[1][1]-25-FudgeFactor-(SpindleDiameter/2)]] 

TightenerSpace = [[SpindleClampCorner[0][0],SpindleClampCorner[1][1]-25],\
                  [SpindleClampCorner[0][0]+25,SpindleClampCorner[1][1]],\
                  [SpindleClampCorner[1][0]-25,SpindleClampCorner[1][1]-25],\
                  [SpindleClampCorner[1][0],SpindleClampCorner[1][1]]]

SqueezyBit = [[SpindleClampCorner[1][0]/2-2.5,SpindleClampCorner[0][1]+15],\
              [SpindleClampCorner[1][0]/2+2.5,SpindleClampCorner[1][1]]]

#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#cutouts=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)
#increaseoffsets(axis,secondoffset)
#populateholes(name,radius)
#populatecutouts(name)
#makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)

#set up inputs to FreeCAD function
firstoffset = FreeCAD.Vector(0,0,0)
secondoffset = FreeCAD.Vector(1000,0,0)
Xlength=SpindleClampWidth
Ylength=SpindleClampLength
#holes=[[radius,Xoffset,Yoffset],etc]
holes=[]
holes.extend(populateholes(SpindleClampNutHoles,NutHoleRadius))
holes.extend(populateholes(SpindleHoleLocation,SpindleDiameter/2))
#cutouts=[[length,width,Xoffset,Yoffset],etc]
cutouts=[]
cutouts.extend(populatecutouts(TightenerSpace))
cutouts.extend(populatecutouts(SqueezyBit))
#make the first clamp
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
#increase the offsets and make the second clamp.
secondoffset = increaseoffsets("y",secondoffset)
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)











#DRAW Z RAILS

#make two
ZRail = [[0,0] , [SpindleClampWidth,ZRailLength]]
ZRailNutHoles = [[ZRail[0][0]+NutHoleOffset,ZRail[1][1]-NutHoleOffset] , \
           		 [ZRail[1][0]-NutHoleOffset,ZRail[1][1]-NutHoleOffset]] 
#Not needed any more. the spindle clamp nuts will hold these together fine. 
#ZRailBoltHoles = [[ZRail[1][0]/2,ZRail[1][1]/4],\
#                  [ZRail[1][0]/2,ZRail[1][1]*3/4]]
ZRailBoltSlides = [[ZRail[0][0]+NutHoleOffset-BoltRadius,MDF/2-BoltRadius],\
              	   [ZRail[0][0]+NutHoleOffset+BoltRadius,ZRail[1][1]*3/4],\
		           [ZRail[1][0]-NutHoleOffset-BoltRadius,MDF/2-BoltRadius],\
              	   [ZRail[1][0]-NutHoleOffset+BoltRadius,ZRail[1][1]*3/4]]

#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#cutouts=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)
#increaseoffsets(axis,secondoffset)
#populateholes(name,radius)
#populatecutouts(name)
#makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)

#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.y = 0.0
secondoffset = increaseoffsets("x",secondoffset)
Xlength=ZRail[1][0]
Ylength=ZRail[1][1]
#Holes
holes=[]
holes.extend(populateholes(ZRailNutHoles,NutHoleRadius))
#Not needed any more. the bolts for the spindle clamps and Z limit switches will do the trick.
#holes.extend(populateholes(ZRailBoltHoles,BearingBoltRadius))
#cutouts
cutouts=[]
cutouts.extend(populatecutouts(ZRailBoltSlides))
#Make the part
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
#increase offset and make part again if needed
secondoffset = increaseoffsets("y",secondoffset)
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)






#DRAW Z MOTOR MOUNT

#heck, make two of these too, it could use reinforcing.
#Note, was too short. Adding bearingradiusplusrail and bearingradius
#Oh heck, actually I do want it short... shorten it back up. 
#The nut holder is moving over so I can squeeze the Y gantry down.

ZMotorMount = [[0,0] , [FudgeFactor+NemaMotorMount+FudgeFactor+SpindleClampWidth,FudgeFactor+NemaMotorMount+FudgeFactor]]

ZMotorMountBoltSlides = [[ZMotorMount[1][0]-SpindleClampWidth+NutHoleOffset-BoltRadius,FudgeFactor*2],\
              	         [ZMotorMount[1][0]-SpindleClampWidth+NutHoleOffset+BoltRadius,ZMotorMount[1][1]-FudgeFactor*2],\
		                 [ZMotorMount[1][0]-NutHoleOffset-BoltRadius,FudgeFactor*2],\
              	         [ZMotorMount[1][0]-NutHoleOffset+BoltRadius,ZMotorMount[1][1]-FudgeFactor*2]]

ZMotorSpot = [[FudgeFactor + NemaMotorMount/2, ZMotorMount[1][1]/2]]
MotorMountHoles =[[ZMotorSpot[0][0]-30+6.43,ZMotorSpot[0][1]-30+6.43] , \
                  [ZMotorSpot[0][0]-30+6.43,ZMotorSpot[0][1]+30-6.43] , \
                  [ZMotorSpot[0][0]+30-6.43,ZMotorSpot[0][1]+30-6.43] , \
                  [ZMotorSpot[0][0]+30-6.43,ZMotorSpot[0][1]-30+6.43]] 

#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#cutouts=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)
#increaseoffsets(axis,secondoffset)
#populateholes(name,radius)
#populatecutouts(name)
#makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)

#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.y = 0.0
secondoffset = increaseoffsets("x",secondoffset)
Xlength=ZMotorMount[1][0]
Ylength=ZMotorMount[1][1]
#Holes
holes=[]
holes.extend(populateholes(ZMotorSpot,ZRodBearingDiameter/2)) 
holes.extend(populateholes(MotorMountHoles,2.5))
#cutouts
cutouts=[]
cutouts.extend(populatecutouts(ZMotorMountBoltSlides))
#Make the part
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
#increase offset and make part again if needed
secondoffset = increaseoffsets("y",secondoffset)
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)



#DRAW NUTHOLDER

#make two of these, it needs reinforcing and requires two so it doesn't torque.
#32mm for the nut, QuarterInch for the bolt, How much for the rest? Space is 34mm
#fork it, half inch? 15mm. It'll be fine. don't want it to split.

#One hole for rod, one hole for a bolt.

#YGantryWidth = FudgeFactor + BearingDiameter + NutHolder + BearingRadius + BearingRadiusPlusRail + SpindleClampWidth + BearingRadius + BearingRadiusPlusRail + SpringSpace + FudgeFactor + BearingDiameter + FudgeFactor

#slidey cutout is at...
#                  [FudgeFactor+BearingDiameter+NutHolder-QuarterInch*2,SpringSpace*4] , \
#                  [FudgeFactor+BearingDiameter+NutHolder-QuarterInch,YGantryTopBearingY-SpringSpace*4] , \

#That means the distance between the Z slidey cutout and the rail is 
NutSpace=(BearingDiameter+NutHolder+BearingRadius+BearingRadiusPlusRail-Rail)-(BearingDiameter+NutHolder-QuarterInch)-2 #-2 is for wiggle room.

NutHolderThing=[[0,0],[15+QuarterInch+NutSpace,15+NemaMotorMount+FudgeFactor]]#+15 is random, need space.

#from Z motor mount...

ZMotorSpot = [[NutHolderThing[1][0]+2+Rail-(NemaMotorMount/2+FudgeFactor),25+NemaMotorMount/2]]

#BoltHole =[[NutHolderThing[1][0]/2,NutHolderThing[0][0]+15]] #Don't need this any more. Use the bolts holding the nut to hold these together, if you use two. 



#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.y = 0.0
secondoffset = increaseoffsets("x",secondoffset)
Xlength=NutHolderThing[1][0]
Ylength=NutHolderThing[1][1]
#Holes
holes=[]
holes.extend(populateholes(ZMotorSpot,ZRodDiameter/2+2)) #+2 is for further wiggle room, lining this up can be a PITA. This was ZRodBearingDiameter. The hole was just way too crazy big. 
holes.extend(populateholes(BoltHole,QuarterInch))
#cutouts
cutouts=[]
#Make the part
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
#increase offset and make part again if needed
secondoffset = increaseoffsets("y",secondoffset)
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)





#DRAW Y GANTRY
#		calculate width from router clamp width
#		YGantryWidth, YGantryHeight, YGantryTopBearingY, YGantryZRollerX, YGantryBottomBearingY
#		YGantryLeftRollerX, YGantryRightRollerX, YGantryZSlideyX calculated above


YGantry = [[0,0] , [YGantryWidth,YGantryHeight]]

YGantryBoltHoles = [[YGantryLeftRollerX,YGantryTopBearingY],\
              	    [YGantryZRollerX,YGantryTopBearingY],\
	        	    [YGantryRightRollerX,YGantryTopBearingY],\
              	    [YGantryZRollerX,FudgeFactor+BearingRadius]]

YMotorSpot = [[YGantry[1][0]/2, YGantry[1][1] - FudgeFactor - SkateBearingDiameter - FudgeFactor - NemaMotorMount/2]]
MotorMountHoles =[[YMotorSpot[0][0]-30+6.43,YMotorSpot[0][1]-30+6.43] , \
                  [YMotorSpot[0][0]-30+6.43,YMotorSpot[0][1]+30-6.43] , \
                  [YMotorSpot[0][0]+30-6.43,YMotorSpot[0][1]+30-6.43] , \
                  [YMotorSpot[0][0]+30-6.43,YMotorSpot[0][1]-30+6.43]] 

#second and first two are for Z bearings
#third two are for nut holder
#fourth and fifth two are for bottom Y bearings
#last two are for an idler bearing to allow Y belt to tighten
SlideyBoltHoles =[[YGantryZSlideyX-SpringSpace,YGantryTopBearingY-ThreeEighthsInch/2] , \
                  [YGantryZSlideyX+SpringSpace,YGantryTopBearingY+ThreeEighthsInch/2] , \
                  [YGantryZSlideyX-SpringSpace,FudgeFactor+BearingRadius-ThreeEighthsInch/2] , \
                  [YGantryZSlideyX+SpringSpace,FudgeFactor+BearingRadius+ThreeEighthsInch/2] , \
                  [FudgeFactor+BearingDiameter-QuarterInch*2,SpringSpace*4] , \
                  [FudgeFactor+BearingDiameter-QuarterInch,YGantryTopBearingY-SpringSpace*4] , \
                  [YGantryLeftRollerX-ThreeEighthsInch/2,YGantryBottomBearingY-SpringSpace] , \
                  [YGantryLeftRollerX+ThreeEighthsInch/2,YGantryBottomBearingY+SpringSpace] , \
                  [YGantryRightRollerX-ThreeEighthsInch/2,YGantryBottomBearingY-SpringSpace] , \
                  [YGantryRightRollerX+ThreeEighthsInch/2,YGantryBottomBearingY+SpringSpace] , \
	        	  [YGantry[1][0]/2-NemaMotorMount,YGantryHeight-SkateBearingRadius-SkateBearingBoltRadius] , \
		          [YGantry[1][0]/2+NemaMotorMount,YGantryHeight-SkateBearingRadius+SkateBearingBoltRadius]]


#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.y = 0.0
secondoffset = increaseoffsets("x",secondoffset)
Xlength=YGantry[1][0]
Ylength=YGantry[1][1]
#Holes
holes=[]
#holes.extend(populateholes(YMotorSpot,38.1/2)) #Not needed any more, motor is mounted on other side.
holes.extend(populateholes(MotorMountHoles,2.5))
holes.extend(populateholes(YGantryBoltHoles,BearingBoltRadius))
#cutouts
cutouts=[]
cutouts.extend(populatecutouts(SlideyBoltHoles))
#Make the part
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)





#DRAW Y RAIL PIECE (1)
#		calculation done above for lengths

YRail = [[0,0] , [YRailLength,YRailHeight]]

YRailBoltHoles = [[YRail[0][0]+NutHoleOffset,YRail[1][1]-MDF/2],\
              	   [YRail[1][0]/2,YRail[1][1]-MDF/2],\
              	   [YRail[1][0]-NutHoleOffset,YRail[1][1]-MDF/2],\
              	   [YRail[0][0]+NutHoleOffset,YRail[0][0]+MDF/2],\
              	   [YRail[1][0]/2,YRail[0][0]+MDF/2],\
              	   [YRail[1][0]-NutHoleOffset,YRail[0][0]+MDF/2]]

YRailNutHoles =  [[YRail[0][0]+NutHoleOffset,YRail[1][1]/2],\
              	  [YRail[1][0]-NutHoleOffset,YRail[1][1]/2]]

#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.y = 0.0
secondoffset = increaseoffsets("x",secondoffset)
Xlength=YRail[1][0]
Ylength=YRail[1][1]
#Holes
holes=[]
holes.extend(populateholes(YRailBoltHoles,BoltRadius))
holes.extend(populateholes(YRailNutHoles,NutHoleRadius))
#cutouts
cutouts=[]
#Make the part
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)









#DRAW Y TOP AND BOTTOM MIDDLE PIECES (2)

YRailTopBottom = [[0,0] , [YRailLength,YRailDepth]]

YRailNutHoles = [[YRailTopBottom[0][0]+NutHoleOffset,YRailTopBottom[1][1]-NutHoleOffset],\
              	   [YRailTopBottom[1][0]/2,YRailTopBottom[1][1]-NutHoleOffset],\
              	   [YRailTopBottom[1][0]-NutHoleOffset,YRailTopBottom[1][1]-NutHoleOffset],\
              	   [YRailTopBottom[0][0]+NutHoleOffset,YRailTopBottom[0][1]+NutHoleOffset],\
              	   [YRailTopBottom[1][0]-NutHoleOffset,YRailTopBottom[0][1]+NutHoleOffset]]

#set up inputs to FreeCAD function
#firstoffset already correct from before
#secondoffset.y = 1000.0
#secondoffset.x = 0.0
secondoffset = increaseoffsets("y",secondoffset)
Xlength=YRailTopBottom[1][0]
Ylength=YRailTopBottom[1][1]
#Holes
holes=[]
holes.extend(populateholes(YRailNutHoles,NutHoleRadius))
#cutouts
cutouts=[]
#Make the part
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
#increase offset and make part again if needed
secondoffset = increaseoffsets("y",secondoffset)
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)













#DRAW X GANTRY PIECE ONE
#		calculate everything so the router bit sits at the edge of the rail bearings.
#		assume the rail support is 50mm thick.
#		XGantryHeight,XGantryWidth,XGantryTopBearingY,XGantryBottomBearingY,XGantryBearingXLeft,
#		MotorBeltHole, TightenerBeltHole,
#		XGantryBearingXRight,XGantryLowerRightYRailCorner all calculated above


XGantry = [[0,0] , [XGantryWidth,XGantryHeight]]

#bolt holes for the bearings that ride on top of X rail.
XGantryBearingBoltHoles = [[XGantryBearingXLeft,XGantryTopBearingY],\
              	   	   [XGantryBearingXRight,XGantryTopBearingY]]

#Bolt holes that connect the Y Rail
XGantryBoltHoles = [[XGantryLowerRightYRailCorner[0]-MDF/2,XGantryLowerRightYRailCorner[1]+YRailHeight/2],\
              	    [XGantryLowerRightYRailCorner[0]-MDF-YRailDepth+NutHoleOffset,XGantryLowerRightYRailCorner[1]+MDF/2],\
		    [XGantryLowerRightYRailCorner[0]-MDF-YRailDepth+NutHoleOffset,XGantryLowerRightYRailCorner[1]+YRailHeight-MDF/2]]

#X axis motor holes
XMotorSpot = [[XGantryLowerRightYRailCorner[0]-MDF-NemaMotorMount/2-FudgeFactor,XGantryLowerRightYRailCorner[1]+MDF+NemaMotorMount/2+FudgeFactor]]
MotorMountHoles = [[XMotorSpot[0][0]-30+6.43,XMotorSpot[0][1]-30+6.43] , \
                   [XMotorSpot[0][0]-30+6.43,XMotorSpot[0][1]+30-6.43] , \
                   [XMotorSpot[0][0]+30-6.43,XMotorSpot[0][1]+30-6.43] , \
                   [XMotorSpot[0][0]+30-6.43,XMotorSpot[0][1]-30+6.43]] 

#bolt slidey holes for the bearings that ride on botton of rail, plus springs.
SlideyBoltHoles = [[XGantryBearingXLeft-BearingBoltRadius,XGantryBottomBearingY-SpringSpace] , \
                   [XGantryBearingXLeft+BearingBoltRadius,XGantryBottomBearingY+SpringSpace] , \
                   [XGantryBearingXRight-BearingBoltRadius,XGantryBottomBearingY-SpringSpace] , \
                   [XGantryBearingXRight+BearingBoltRadius,XGantryBottomBearingY+SpringSpace]] 

#single slider for the ilder pulley bolts
IdlerPulleyTrack = [[XGantry[0][0]+20,MiddleOfXRail-SkateBearingBoltRadius] , \
                    [XGantry[1][0]-20,MiddleOfXRail+SkateBearingBoltRadius]]

#hole for the belt to come through
#MotorBeltHole, TightenerBeltHole
BeltHoles = [[MotorBeltHole[0]-12,MotorBeltHole[1]] , \
	        [MotorBeltHole[0]+12,MotorBeltHole[1]+FudgeFactor] , \
	        [TightenerBeltHole[0]-12,TightenerBeltHole[1]] , \
	        [TightenerBeltHole[0]+12,TightenerBeltHole[1]+FudgeFactor]]
#These are bolt holes on either side of the belt hole, and below, to clamp the belt in with a piece of wood.
BeltHoleNutHoles = [[BeltHoles[0][0]-5,BeltHoles[0][1]-5] , \
	                [BeltHoles[1][0]+5,BeltHoles[0][1]-5] , \
	    	        [BeltHoles[2][0]-5,BeltHoles[2][1]-5] , \
		            [BeltHoles[3][0]+5,BeltHoles[2][1]-5]]

#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.x = 0.0
secondoffset.y = 1000.0
#secondoffset = increaseoffsets("x",secondoffset)
Xlength=XGantry[1][0]
Ylength=XGantry[1][1]
#Holes
holes=[]
holes.extend(populateholes(XGantryBearingBoltHoles,BearingBoltRadius))
holes.extend(populateholes(XMotorSpot,38.1/2))
holes.extend(populateholes(MotorMountHoles,2.5))
holes.extend(populateholes(BeltHoleNutHoles,BoltRadius))
#cutouts
cutouts=[]
cutouts.extend(populatecutouts(SlideyBoltHoles))
cutouts.extend(populatecutouts(IdlerPulleyTrack))
cutouts.extend(populatecutouts(BeltHoles))
#Make the part
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
#redo holes variable for second X gantry part. see notes above.
holes=[]
holes.extend(populateholes(XGantryBearingBoltHoles,BearingBoltRadius))
holes.extend(populateholes(XMotorSpot,SkateBearingRadius))
holes.extend(populateholes(BeltHoleNutHoles,BoltRadius))
secondoffset = increaseoffsets("x",secondoffset)
#Make the second part
makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)





#If they need a table
#draw end caps (2)
#draw X rails (2)
#draw outside pieces (2)
#draw inside pieces (2)


#Table Notes: No fudge room on the table! 
#If someone wants extra room for clamps, they need to ask for it in X/Y/Z travel space. 
#I don't know what they'll want for clamp space and it's a PITA for both of us to try to...
#work through programmed in assumptions. 

if Table == "nope":  #they do not have a table, we need to make one
    
    # X RAIL SUPPORTS
    
    #XRailThickness = 50 This is thickness of the piece of wood the X rails sits on.
    
    LowerCorner = [0,0]
    UpperCorner = [XTravel+XGantryWidth,XRailThickness]
    BoltHoles = [[LowerCorner[0]+NutHoleOffset,25] , \
                [UpperCorner[0]/4,25] , \
                [UpperCorner[0]/2,25] , \
                [UpperCorner[0]*3/4,25] , \
                [UpperCorner[0]-NutHoleOffset,25]] 
    
    #set up inputs to FreeCAD function
    #firstoffset already correct from before
    secondoffset.x = 0.0
    secondoffset.y = 3000.0
    #secondoffset = increaseoffsets("y",secondoffset)
    Xlength=UpperCorner[0]
    Ylength=UpperCorner[1]
    #Holes
    holes=[]
    holes.extend(populateholes(BoltHoles,QuarterInch/2))
    #cutouts
    cutouts=[]
    #Make the part
    makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    #increase offset and make part again if needed
    secondoffset = increaseoffsets("y",secondoffset)
    makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    
    
    
    
    
    # ENDCAP
    
    #This works    
    #~6"(150mm) tall, thicker is better, but more expensive, as long as it needs to be for Y travel
    #2 rails in middle, put them at 1/3 and 2/3 distance.
    #Put on stick out bits to lash the belts to. give 50mm for that.
    #This is held up to the rail for dimensions.
    
    LowerCorner = [YRail[0][0]-MDF-50,0]
    UpperCorner = [YRail[1][0]+MDF+50,25*6]
    
    BeltSpot = [[LowerCorner[0]+50-25,UpperCorner[1]-Rail-25-SkateBearingRadius-10],\
                [LowerCorner[0]+50,UpperCorner[1]-Rail-25-SkateBearingRadius],\
                [UpperCorner[0]-50,UpperCorner[1]-Rail-25-SkateBearingRadius-10],\
                [UpperCorner[0]-50+25,UpperCorner[1]-Rail-25-SkateBearingRadius]]
                
    #BeltSpot = [[LowerCorner[0]+50,UpperCorner[1]-Rail-25-SkateBearingRadius],\
    #            [LowerCorner[0]+50-25.4,UpperCorner[1]-Rail-25-SkateBearingRadius-10],\
    #            [UpperCorner[0]-50,UpperCorner[1]-Rail-25-SkateBearingRadius],\
    #            [UpperCorner[0]-50+25.4,UpperCorner[1]-Rail-25-SkateBearingRadius-10]]                
    # These go inside left, outside left, inside right, outside right. That's not my normal order. Sorry
    # Wow that messed up my populate boxes function. correcting above. 
    
    BeltSpotBoltHoles = [[BeltSpot[0][0]-QuarterInch,BeltSpot[1][1]+QuarterInch],\
                         [BeltSpot[1][0]+QuarterInch,BeltSpot[1][1]+QuarterInch],\
                         [BeltSpot[2][0]-QuarterInch,BeltSpot[3][1]+QuarterInch],\
                         [BeltSpot[3][0]+QuarterInch,BeltSpot[3][1]+QuarterInch]]
    #Note, I need the middle supports to be sunk a bit so I can lay table and some sacrificial MDF down.
    BoltHoles = [[YRail[0][0]+BearingAssyToRail+MDF+MDF/2,NutHoleOffset] , \
                [YRail[0][0]+BearingAssyToRail+MDF+MDF/2,UpperCorner[1]/2] , \
                [YRail[0][0]+BearingAssyToRail+MDF+MDF/2,UpperCorner[1]-NutHoleOffset] , \
                \
                [YRail[1][0]/3,NutHoleOffset] , \
                [YRail[1][0]/3,UpperCorner[1]-NutHoleOffset-25],\
                \
                [YRail[1][0]*2/3,NutHoleOffset] , \
                [YRail[1][0]*2/3,UpperCorner[1]-NutHoleOffset-25],\
                \
                [YRail[1][0]-BearingAssyToRail-MDF-MDF/2,NutHoleOffset] , \
                [YRail[1][0]-BearingAssyToRail-MDF-MDF/2,UpperCorner[1]/2] , \
                [YRail[1][0]-BearingAssyToRail-MDF-MDF/2,UpperCorner[1]-NutHoleOffset]] 
    
    #set up inputs to FreeCAD function
    firstoffset.x = (YRail[0][0]-MDF-50)
    #secondoffset.x = 0.0
    #secondoffset.y = 2000.0
    secondoffset = increaseoffsets("y",secondoffset)
    Xlength=UpperCorner[0]-LowerCorner[0]
    Ylength=UpperCorner[1]
    #Holes
    holes=[]
    holes.extend(populateholes(BoltHoles,QuarterInch/2))
    holes.extend(populateholes(BeltSpotBoltHoles,QuarterInch/2))
    #cutouts
    cutouts=[]
    cutouts.extend(populatecutouts(BeltSpot))
    #Make the part
    makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    #increase offset and make part again if needed
    secondoffset = increaseoffsets("y",secondoffset)
    makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    
       
    
    
    
    
    
    # X side
    #	~6"(150mm) tall, as long as it needs to be for X travel
    #       Note! The top of the rail is meant to be flush with the side. Easier postitioning calculations...
    #	bolt holes for rail. 
    #	nut holes for endcap connection
    #	Leave an extra half inch on each side for cutting the table. 
    
    LowerCorner = [0,0]
    UpperCorner = [XTravel+XGantryWidth,25*6]
    
    NutHoles = [[LowerCorner[0]+NutHoleOffset,LowerCorner[1]+NutHoleOffset] , \
             [LowerCorner[0]+NutHoleOffset,UpperCorner[1]/2] , \
             [LowerCorner[0]+NutHoleOffset,UpperCorner[1]-NutHoleOffset] , \
             [UpperCorner[0]-NutHoleOffset,LowerCorner[1]+NutHoleOffset] , \
             [UpperCorner[0]-NutHoleOffset,UpperCorner[1]/2] , \
            [UpperCorner[0]-NutHoleOffset,UpperCorner[1]-NutHoleOffset]] 
    
    BoltHoles = [[LowerCorner[0]+NutHoleOffset,UpperCorner[1]-Rail-25] , \
            [UpperCorner[0]/4,UpperCorner[1]-Rail-25] , \
            [UpperCorner[0]*2/4,UpperCorner[1]-Rail-25] , \
            [UpperCorner[0]*3/4,UpperCorner[1]-Rail-25] , \
            [UpperCorner[0]-NutHoleOffset,UpperCorner[1]-Rail-25]] \
    
    #set up inputs to FreeCAD function
    #firstoffset needs correction.
    firstoffset.x = 0.0
    secondoffset.x = 1000.0
    secondoffset.y = 2000.0
    #secondoffset = increaseoffsets("y",secondoffset)
    Xlength=UpperCorner[0]
    Ylength=UpperCorner[1]
    #Holes
    holes=[]
    holes.extend(populateholes(NutHoles,NutHoleRadius))
    holes.extend(populateholes(BoltHoles,QuarterInch/2))
    #cutouts
    cutouts=[]
    #Make the part
    makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    #increase offset and make part again if needed
    secondoffset = increaseoffsets("y",secondoffset)
    makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    
    
    
    
    # X internal table supports
    
    #	as long as it needs to be for X travel
    #	keep bolt holes for rail, in case someone wants to extend them for extra stability. 
    #	Nix the end bolt holes though. They're in the way. Someone else may want them though.... leave code.
    #	nut holes for endcap connection
    
    
    LowerCorner = [0,0]
    UpperCorner = [XTravel+XGantryWidth,(6.0*25)-25]
    
    NutHoles = [[LowerCorner[0]+NutHoleOffset,LowerCorner[1]+NutHoleOffset] , \
             [LowerCorner[0]+NutHoleOffset,UpperCorner[1]-NutHoleOffset] , \
             [UpperCorner[0]-NutHoleOffset,LowerCorner[1]+NutHoleOffset] , \
             [UpperCorner[0]-NutHoleOffset,UpperCorner[1]-NutHoleOffset]] 
    
    BoltHoles = [[LowerCorner[0]+NutHoleOffset,UpperCorner[1]-Rail] , \
            [UpperCorner[0]/4,UpperCorner[1]-Rail] , \
            [UpperCorner[0]*2/4,UpperCorner[1]-Rail] , \
            [UpperCorner[0]*3/4,UpperCorner[1]-Rail] , \
            [UpperCorner[0]-NutHoleOffset,UpperCorner[1]-Rail]] \
    
    #set up inputs to FreeCAD function
    #firstoffset needs correction.
    firstoffset.x = 0.0
    secondoffset.x = 3000.0
    secondoffset.y = 2000.0
    #secondoffset = increaseoffsets("y",secondoffset)
    Xlength=UpperCorner[0]
    Ylength=UpperCorner[1]
    #Holes
    holes=[]
    holes.extend(populateholes(NutHoles,NutHoleRadius))
    holes.extend(populateholes(BoltHoles,QuarterInch/2))
    #cutouts
    cutouts=[]
    #Make the part
    makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    #increase offset and make part again if needed
    secondoffset = increaseoffsets("y",secondoffset)
    makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    
    







#Fuck I hope this works...
Gui.activeDocument().activeView().viewAxometric()
Gui.SendMsgToActiveView("ViewFit")
