#!/usr/bin/python
#This is an attempt to create a FreeCad macro to create all the parts for my CNC router.
#I wanted to be able to do tweaks without having to laboriously change everything in CAD.



#INSTRUCTIONS
#   There is a section devoted to changable constants (ha!) below.
#   Go there and change all the variables to fit your parts and the machine you want to make.
#       It should be fairly well commented.
#   Also, you need to choose if you're going to use your own table, or have this spit one out for you.
#       If you use your own, make sure to change the variable for the X rail support. 
#   At this point, I haven't made this a proper FreeCAD macro yet. 
#       1)Open FreeCAD. 
#       2)Select Part workbench. 
#       3)Create New Document. 
#       4)Paste this into the Python Console. Wait.
#       5)Select all the parts and export as whatever file type you want it in.







#NOTES!
#   My machine is a moveable gantry style. It uses belt or chain for X and Y. Z is a screw.
#   I am an American, and tend to think in inches. I use 25mm whenever I need "about an inch".
#   That being said, I worked in metric here.
#   I'm not a programmer by trade, so if this is just horribly ugly, please tell me so.(but be nice)
#   I do a rough draft before coding. I hope everything will be clear between that and the inline comments.
#
#   I use 3/4" MDF. The script should handle other widths, but you'll have issues with the railing fitting.
#       If you change the railing to fit the plywood/MDF/whatever, change the rail variable.
#	hole locations are referenced to center of hole.
#	All nut holes are a Diameter away from the outside of the piece.
#	This uses V groove 3/8" bearings and American bolts for most everything but the idler rollers.
#	Idle rollers are made from bare skate bearings on 8mm bolts.
#       MDF connection uses 1/4" bolts. V groove bearings use 3/8" bolts. Idler rollers use 8mm bolts.
#        (I'm so sorry to mix Imperial and Metric!)
#   I'm using 3/4" L sections from Home Depot/Lowes for my railing. 
#       If you're using something else, change the scripts! Also, I just screwed mine into the wood. 
#       If you want fancy adjustment capability, well... 
#	I assume the table is of equal height with the rails(in the Z direction here for clarification).
#   I also assume that you can raise your spindle up the Z rails.
#       Why waste travel space on the chuck?
#   I left wiggle room around some bolts. I had delusions I could fit a spring in there to make snugging the bolts easier. I actually haven't tried it yet. 

#   You'll have some wasted Y space due to the width of the Y gantry. Use that for clamping.
#   You may want some more space on the X axis for clamping at one end.
#       The other will have plenty of wasted space due to the width of the X gantry.
#   You'll have to slap down your own table on the inside table pieces. 
#   The provided holes in the table insides and outsides allow you to use threaded rod to connect everything for added rigidity. No one wants a wobbly table.
#   
#   -Tony Diethelm







#To Do List in sort of order:
#   create beveling around bolt heads so they don't stick out.
#   fillet all the edges so the parts look "nicer"
#   clean up the math so it doesn't spit out .0000000444444 stupidity. I might not actually care...
#   The Y gantry has a lack of wiggle room between the Z slidey bearing and the Y right side bearings.
#       Look into fixing that. Currently has FudgeFactor in there. Might work. 
#   I need to make a variable for the size of the hole to cut for the motor to sit flush. 
#       Specifically for the X gantry piece with the motor mount on it.







#REALLY ROUGH DRAFT, FREECAD STUFF

#make the shape, move it if needed(most don't)
#for each cylinder: make it with offsets, cut it out, recompute.
#for each slidey: make it with offsets, cut it out, recompute.
#move the part to it's final destination
#show the part. 
#save the thing.

#variables needed
#initial part offset, one for each hole, one for each slidey, the whole part offset.
#Hole should have radius, X and Y locations for each hole. Height should be assumed to be MDF.
#Slidey should have length(x), width(y), X and Y offset locations. Height should be assumed to be MDF.

#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#cutouts=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)






#ROUGH DRAFT, FREECAD STUFF

#import all the needed modules
#Do all the algebra calcs for the parts
#For Each Part.....
# Do the math.
	#Almost all of my pieces are made in points from 0,0 to width(x),height(y). This is not always true.
	    #specifically the table endcaps.
	#Note, my script assumes width,height is X,Y. FreeCad assumes Length, Width, Height is X,Y,Z.
	#I can just make the part, shift it over to match the script I have already done,
	#then all my holes and cutouts match up fine... THEN offset the whole thing. It means an extra
	#move for the initial block... but it also means not having offsets all over the stupid place.
	#go with this......
	
	#Pop all the info into the proper variables

#I need to create a function for this.
    #create a box representing the piece of MDF, correctly sized, at offset.
    #For each cylinder
    	#create a cylinder representing the hole to be drilled, properly placed, with offset.
    	#cut it from the main part. recalculate.
    #For each slidey
        #create a box representing the slidey hole to be cut, properly placed, with offset.
        #cut it from the main part. recalculate.
    #move the part
    #show it on the screen.

#Do I need to rename the part once the function is done to avoid overwriting stuff?
#save it






#ROUGH OUTLINE, NON FREECAD STUFF

#Set up the basic constants.
#Get them to populate variables for their machine and parts.
#	ask if the table it's going to sit on is already pre built.
#		Yes)
#			ask for table dimensions. Note that we're assuming they'll bolt the rails onto the table sides.
#			calculate Y rail length.
#		No)
#			ask for X, Y
#   ask for Z travel
#	check if they want Z overtravel (to cut the table)
#	calculated constants based on their input, used for later geometry.
#   Do all the Gantry calcs up here instead of throwing them all over. I hate scrolling to and fro.

#	draw spindle clamps (2)
#	draw Z motor mount (2)
#   draw Z rails (2)
#   draw nut holder
#	draw Y gantry
#		calculate width from router clamp width
#	draw Y top/bottom pieces (2)
#		calculate length from needed Y-(Y gantry width)
#	draw Y middle piece
#		calculate length from needed Y-(Y gantry width)
#	draw X gantry pieces (2)
#		calculate everything so the router bit sits at the edge of the rail bearings.
#	If they need a table
#		draw end caps (2)
#		draw outside pieces (2)
#		draw inside pieces (2)
#







# THE ACTUAL SCRIPT, attempting to create geometry and stick it into FreeCAD.
import sys






# SET UP THE CONSTANTS
# These are all the things that will probably not change from machine to machine. Definitions, Rail sizes, etc.
QuarterInch = 6.35
ThreeQuarterInch = 19.05
ThreeEighthsInch = 9.525
HalfInch = 25.4/2.0
BoltRadius = QuarterInch/2
BearingBoltRadius = ThreeEighthsInch/2
NutHoleRadius = 25.4/2
NutHoleOffset = NutHoleRadius*2
BearingDiameter = 30.73 #From spec sheet
BearingRadius = BearingDiameter/2
BearingAssyToRail = 14.3 #Measured by Tony. Badly
BearingRadiusPlusRail = 32.4 #Measured by Tony. Badly. 
IdlerPulleyDiameter = 28 #Measured by Tony. Badly
PulleyRadius = 8 #Measured by Tony. Badly
Nema24 = 60
Nema23 = 57
Nema17 = 42.3
Nema24Hole = 38.1
Nema23Hole = 38.1
Nema17Hole = 22
SkateBearingDiameter = 22
SkateBearingRadius = SkateBearingDiameter/2
SkateBearingBoltDiameter = 8
SkateBearingBoltRadius = 4







#CHANGE THIS STUFF FOR YOUR MACHINE

MotorSize = Nema24 #These sizes are declared above.
if MotorSize == Nema24 or MotorSize == Nema23:
    MotorHoleDiameter = Nema24Hole
if MotorSize == Nema17:
    MotorHoleDiameter = Nema17Hole

MDF = ThreeQuarterInch #What size MDF are you using?
SpindleDiameter = 65.0 #If yours has different diameters along the Z axis... You'll have to think on your feet here.
ZRodLength = 381.0 #This is from the top mounting bearing to the end. "usable" Z rod. Note, if you have mounting space on the other end, that counts here. If you leave that out, it will poke out the bottom.
ZRodDiameter = 11.2 #This is the diameter of the screw. I fudge some wiggle room later, so don't do it here.
ZRodBearingDiameter = 24.0 #This is the diameter of the mounting bearing for the Z rod. 
Rail = ThreeQuarterInch  #I use 3/4" L bracket from Home Depot/Lowes. Might also use 1/2"?
#Crap. If you use a different railing size, you'll need to remeasure BearingAssyToRail and BearingRadiusPlusRail located up above.
ZTravel = 25.4*4 #Z travel is the distance between the top of the X rail and the bottom of the Y gantry. 
ZOverTravel = 25.4*6/4 #What amount of Z overtravel (to cut below the X rail line) should there be? This allows you to cut into your own table. I thought it would be nice to be able to custom cut your own table.
XRailThickness = 50 #This is thickness of the piece of wood the X rails sits on. You'll definately want to change this for your machine if you're bolting rails to a table for example.
VacHoseSize = 25.4*3 #Outside diameter of the vac hose you're using. 
MagnetRadius = 4 #Radius of the magnets you get to hold the vac attachment rig on.


Table = "nope" #Yup, you already have a table to put the gantry on. You don't need one. change to "nope" if you want one and the script will spit out parts for a crappy table. Change the values below too.
if Table == "yup":
    TableX = 1474.5 #This is set for my table. This is actual length of the X rail, not cutting length. 
    TableY = 569.0 #This is set for my table. This is the Y distance between XRail to XRail, not cutting length. 
else: #If you want extra space around your table, ask for it in X and Y travel.
    XTravel = 25.4*12*1# How long of X travel do you want?
    YTravel = 25.4*10*1# How long of Y travel do you want?



# THESE ARE SOFT CONSTANTS
 
#They probably won't change. I pulled these values out of my Bum. :D
FudgeFactor = 5 #I used this around edges to give myself some room. 
SpringSpace = 15 #Note, this is to give some room for a compressed spring, and is NOT indicative of how large the slidey hole will be. Slidey holes are usually twice spring space.
SpindleClampBoltSpace = 20





# CALCULATED CONSTANTS

#Should never be less than NutHoleRadius*3+FudgeFactor*3+NutHoleRadius*3, or the holes will be stupid. 
SpindleClampWidth = SpindleDiameter + (2.0*10.0)
if SpindleClampWidth < NutHoleRadius*3+FudgeFactor*3+NutHoleRadius*3:
    SpindleClampWidth = NutHoleRadius*3+FudgeFactor*3+NutHoleRadius*3

YRailHeight = MDF+MotorSize+FudgeFactor*2+MDF #This is the width of the piece that the Y rails sit on. 
YRailDepth = MotorSize+FudgeFactor+MotorSize

ZRodHoleDiameter = ZRodDiameter+10.0  #Wiggle Room
# note that Z rail length needs to be long enough for the lead screw or it'll poke out the bottom. No Bueno!
ZRailLength = SpringSpace + (BearingDiameter/2 + BearingRadiusPlusRail)*2 + YRailHeight + ZTravel + ZOverTravel
if ZRodLength > ZRailLength:
	ZRailLength = ZRodLength







#Y GANTRY CALCULATIONS

#I am constantly trying to make this skinnier. Skinnier = less wasted space.
#This needs to support bearings for the Z rail, and bearings for the Y rail.
#It also needs to hold the nut holder.

#left to right
YGantryWidth = BearingDiameter+ BearingRadius + BearingRadiusPlusRail + SpindleClampWidth + BearingRadius + BearingRadiusPlusRail +FudgeFactor+ BearingDiameter
#bottom to top
YGantryHeight = FudgeFactor + SpringSpace + BearingRadiusPlusRail + YRailHeight + BearingRadiusPlusRail + BearingRadius + FudgeFactor+ MotorSize + FudgeFactor + SkateBearingDiameter + FudgeFactor
# X and Y locations for the Y rail bearings
YGantryTopBearingY = FudgeFactor + SpringSpace + BearingRadiusPlusRail + YRailHeight + BearingRadiusPlusRail
YGantryBottomBearingY = FudgeFactor + SpringSpace
YGantryLeftRollerX = BearingRadius
YGantryRightRollerX = YGantryWidth - BearingRadius
# X and Y locations for the Z rail bearings
YGantryZRollerX = BearingDiameter + BearingRadius
YGantryZSlideyX = YGantryZRollerX + BearingRadiusPlusRail + SpindleClampWidth + BearingRadiusPlusRail




# X GANTRY CALCULATIONS
#bottom to top
XGantryHeight = FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + Rail + ZTravel + YRailHeight + BearingRadiusPlusRail + BearingRadius + FudgeFactor+ MotorSize + FudgeFactor + SkateBearingDiameter + FudgeFactor

#left to right
#This should be wide enough for the Y gantry railings and extend so it goes as far as the bit. 
#You could shorten it of course... Your call, but it won't help the usuable cutting area.
XGantryWidth = YRailDepth + MDF + BearingAssyToRail + MDF + MDF + NutHoleOffset + NutHoleRadius*2 + FudgeFactor + SpindleDiameter/2 + FudgeFactor


#positions for the X rail bearings, top and bottom, X and Y
XGantryTopBearingY = FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + BearingRadiusPlusRail
XGantryBearingXLeft = FudgeFactor + BearingBoltRadius
XGantryBearingXRight = XGantryWidth - FudgeFactor - BearingBoltRadius
XGantryBottomBearingY = FudgeFactor + SpringSpace
#This is the lower right corner of the Y rail atachments, for easy calculations later.
XGantryLowerRightYRailCorner = [FudgeFactor+YRailDepth + MDF, FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + Rail + ZTravel]

#I need these to calculate where the holes go on the table endcaps and the X gantry
MiddleOfXRail = XGantryTopBearingY-BearingRadiusPlusRail-XRailThickness/2
# these are locations for the holes for the Y belts. Belts should go through these holes and fold down.
# Make the holes go up from this location.
MotorBeltHole = [XGantryLowerRightYRailCorner[0],XGantryLowerRightYRailCorner[1]+YRailHeight+BearingRadiusPlusRail+BearingRadius+FudgeFactor+MotorSize/2-PulleyRadius]
TightenerBeltHole = [XGantryLowerRightYRailCorner[0],XGantryHeight-FudgeFactor]

if Table == "yup":
	YRailLength = TableY + (BearingAssyToRail*2)
else:
	YRailLength = YTravel + YGantryWidth

SpindleClampLength = SpindleClampBoltSpace+FudgeFactor+SpindleDiameter+FudgeFactor+NutHoleRadius+FudgeFactor+NutHoleOffset




#FUNCTION FOR FREECAD ATTEMPT. USE THIS IN EACH SECTION TO GENERATE THE SPECIFIC PART.
def makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset):
    #make the part, with firstoffset
    thepart = Part.makeBox(Xlength,Ylength,MDF,firstoffset)
    #go through all the holes, make 'em with offsets, cut 'em out, etc
    #Notes - hole=[[radius,Xoffset,Yoffset],etc]
    for i in range(0,len(holes),1):
        #make the cylinder, with offsets
        ahole=Part.makeCylinder(holes[i][0],MDF,FreeCAD.Vector(holes[i][1],holes[i][2],0))
        #cut it out from the main part and recalculate the part
        thepart=thepart.cut(ahole)
        App.ActiveDocument.recompute()
    #go through all the cutouts, make 'em with offsets, cut 'em out, etc
    #notes - cutouts=[[length,width,Xoffset,Yoffset],etc]
    for i in range(0,len(cutouts),1):
        #make the box, with offsets
        aslidey=Part.makeBox(cutouts[i][0],cutouts[i][1],MDF,FreeCAD.Vector(cutouts[i][2],cutouts[i][3]))
        #cut it from the main part and recalculate the part.
        thepart=thepart.cut(aslidey)
        App.ActiveDocument.recompute()
    #Do the Fillets
    #thepart = thepart.makeFillet(10,edges) #10 is fillet radius.
    #move the part to the second offset. Show it on the screen.
    thepart.translate(secondoffset)
    return thepart

#FUNCTION FOR POPULATING HOLES VARIABLE
    #Notes - holes=[[radius,Xoffset,Yoffset],etc]
    #define it. pass it the name of the variable to go through, the radius needed
    #for each entry in the given variable, append a new list entry to holes consisting of...
    #radius,name[i][0],name[i][1]
def populateholes(name,radius):
    thingy=[]
    for i in range(0,len(name),1):
        thingy.append([radius,name[i][0],name[i][1]])
    return thingy

#FUNCTION FOR POPULATING cutouts VARIABLE
    #Notes - cutouts=[[length,width,Xoffset,Yoffset],etc]
    #define it. pass it the name of the variable to go through.
        #I'm lazy, and don't want to do the math.
    #for each odd entry in the given variable, append a new list entry to cutouts consisting of...
    #name[i+1][0]-name[i][0],name[i+1][1]-name[i][1],name[i][0],name[i][1] 
def populatecutouts(name):
    thingy = []
    for i in range(0,len(name),2):
        thingy.append([name[i+1][0]-name[i][0],name[i+1][1]-name[i][1],name[i][0],name[i][1]])
    return thingy

#FUNCTION FOR INCREASING THE OFFSET
    #pass it which axis to change and the secondoffset variable.
    #if it's going to increase Y, do it by 500mm
    #if it's going to increase X, do it by 1000mm
def increaseoffsets(axis,secondoffset):
    if axis == "x":
        secondoffset = secondoffset + FreeCAD.Vector(500,0,0)
    if axis == "y":
        secondoffset = secondoffset + FreeCAD.Vector(0,500,0)
    return secondoffset

#FUNCTION FOR POPULATING MotorMountHoles VARIABLE. 
    #This calculated the positions for all the mounting holes for the motors, depending on size.
    #pass it the MotorSize variable so it knows the size.
    #Nema24 = 60
    #Nema23 = 57
    #Nema17 = 42.3
    #MotorSize = Nema24
def makemotorholes(MotorSpot,MotorSize,Nema24,Nema23,Nema17):
    if MotorSize == Nema24:
        half = MotorSize/2
        difference = 5.1
    if MotorSize == Nema23:
        half = MotorSize/2
        difference = 5.1
    if MotorSize == Nema17:
        half = MotorSize/2
        difference = 5.65
    MotorMountHoles =[[MotorSpot[0][0]-half+difference,MotorSpot[0][1]-half+difference] , \
                      [MotorSpot[0][0]-half+difference,MotorSpot[0][1]+half-difference] , \
                      [MotorSpot[0][0]+half-difference,MotorSpot[0][1]+half-difference] , \
                      [MotorSpot[0][0]+half-difference,MotorSpot[0][1]-half+difference]] 
    return MotorMountHoles






#PURE NOTES TO COPY INTO EACH SECTION SO I DON'T HAVE TO KEEP LOOKING UP FOR FUNCTION DEFINITIONS, ETC.
#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#cutouts=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)
#increaseoffsets(axis,secondoffset)
#populateholes(name,radius)
#populatecutouts(name)
#makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)

#set up inputs to FreeCAD function
#firstoffset already correct from before
#secondoffset = increaseoffsets("x",secondoffset)
#Xlength=
#Ylength=
#Holes=
#cutouts
#Make the part
#increase offset and make part again if needed













#DO ALL THE PIECES


#SPINDLE CLAMPS
#   I theoretically need two of these...
#   Fillet edge2,4,24,42    newshape = myshape.makeFillet(radius, edges)


SpindleClampCorner = [[0,0] , [SpindleClampWidth,SpindleClampLength]]

SpindleClampNutHoles = [[SpindleClampCorner[0][0]+NutHoleOffset,SpindleClampCorner[0][1]+NutHoleOffset] , \
           	        	[SpindleClampCorner[1][0]-NutHoleOffset,SpindleClampCorner[0][1]+NutHoleOffset]] 

SpindleHoleLocation = [[SpindleClampWidth/2,SpindleClampCorner[1][1]-SpindleClampBoltSpace-FudgeFactor-(SpindleDiameter/2)]] 

MagnetHoles = [[SpindleClampCorner[0][0]+MagnetRadius*2,SpindleClampCorner[0][1]+MagnetRadius*2],\
               [SpindleClampCorner[0][0]+MagnetRadius*2,NutHoleRadius*3+MagnetRadius*2],\
               [SpindleClampCorner[0][0]+MagnetRadius*2,SpindleClampCorner[1][1]-SpindleClampBoltSpace-MagnetRadius*2],\
               [SpindleClampCorner[1][0]-MagnetRadius*2,SpindleClampCorner[0][1]+MagnetRadius*2],\
               [SpindleClampCorner[1][0]-MagnetRadius*2,NutHoleRadius*3+MagnetRadius*2],\
               [SpindleClampCorner[1][0]-MagnetRadius*2,SpindleClampCorner[1][1]-SpindleClampBoltSpace-MagnetRadius*2]] 


TightenerSpace = [[SpindleClampCorner[0][0],SpindleClampCorner[1][1]-SpindleClampBoltSpace],\
                  [SpindleClampCorner[0][0]+25,SpindleClampCorner[1][1]],\
                  [SpindleClampCorner[1][0]-25,SpindleClampCorner[1][1]-SpindleClampBoltSpace],\
                  [SpindleClampCorner[1][0],SpindleClampCorner[1][1]]]

SqueezyBit = [[SpindleClampCorner[1][0]/2-2.5,SpindleClampCorner[0][1]+15],\
              [SpindleClampCorner[1][0]/2+2.5,SpindleClampCorner[1][1]]]

#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#cutouts=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)
#increaseoffsets(axis,secondoffset)
#populateholes(name,radius)
#populatecutouts(name)
#makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)

#set up inputs to FreeCAD function
firstoffset = FreeCAD.Vector(0,0,0)
secondoffset = FreeCAD.Vector(1000,0,0)
Xlength=SpindleClampWidth
Ylength=SpindleClampLength
edges=[2,4,24,42]
#holes=[[radius,Xoffset,Yoffset],etc]
holes=[]
holes.extend(populateholes(SpindleClampNutHoles,NutHoleRadius))
holes.extend(populateholes(SpindleHoleLocation,SpindleDiameter/2))
holes.extend(populateholes(MagnetHoles,MagnetRadius))
#cutouts=[[length,width,Xoffset,Yoffset],etc]
cutouts=[]
cutouts.extend(populatecutouts(TightenerSpace))
cutouts.extend(populatecutouts(SqueezyBit))
#make the first clamp
SpindleClamp1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(SpindleClamp1)
#increase the offsets and make the second clamp.
secondoffset = increaseoffsets("y",secondoffset)
SpindleClamp2 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(SpindleClamp2)
















#VACUUM ATTACHMENTS
#   Fillet edges....


VacAttachmentCorners = [[0,0] , [SpindleClampWidth,SpindleClampLength+FudgeFactor+VacHoseSize+FudgeFactor]]

SpindleHoleLocation = [[SpindleClampWidth/2,SpindleClampCorner[1][1]-25-FudgeFactor-(SpindleDiameter/2)]] 

VacHoseLocation = [[SpindleClampWidth/2,SpindleClampLength+FudgeFactor+VacHoseSize/2]] 


#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#cutouts=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)
#increaseoffsets(axis,secondoffset)
#populateholes(name,radius)
#populatecutouts(name)
#makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)

#set up inputs to FreeCAD function
#already set up above, increase them.
secondoffset.y = 0.0
secondoffset = increaseoffsets("x",secondoffset)
Xlength=VacAttachmentCorners[1][0]
Ylength=VacAttachmentCorners[1][1]
#holes=[[radius,Xoffset,Yoffset],etc]
holes=[]
holes.extend(populateholes(VacHoseLocation,VacHoseSize/2))
holes.extend(populateholes(SpindleHoleLocation,SpindleDiameter/2))
holes.extend(populateholes(MagnetHoles,MagnetRadius)) #stolen from the spindle clamp calcs.
#cutouts=[[length,width,Xoffset,Yoffset],etc]
cutouts=[]
#make the 
VacAttachment1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
#SpindleClamp1 = SpindleClamp1.makeFillet(10,[2])
Part.show(VacAttachment1)
#increase the offsets and make the second clamp.
#Not Needed.










#DRAW Z RAILS
#   I put in two of these, but could be just one. 
#   Fillet edge1,3,6,21

ZRail = [[0,0] , [SpindleClampWidth,ZRailLength]]
ZRailNutHoles = [[ZRail[0][0]+NutHoleOffset,ZRail[1][1]-NutHoleOffset] , \
           		 [ZRail[1][0]-NutHoleOffset,ZRail[1][1]-NutHoleOffset]] 

ZRailBoltSlides = [[ZRail[0][0]+NutHoleOffset-BoltRadius,MDF/2-BoltRadius],\
              	   [ZRail[0][0]+NutHoleOffset+BoltRadius,ZRail[1][1]*3/4],\
		           [ZRail[1][0]-NutHoleOffset-BoltRadius,MDF/2-BoltRadius],\
              	   [ZRail[1][0]-NutHoleOffset+BoltRadius,ZRail[1][1]*3/4]]

#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#cutouts=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)
#increaseoffsets(axis,secondoffset)
#populateholes(name,radius)
#populatecutouts(name)
#makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)

#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.y = 0.0
secondoffset = increaseoffsets("x",secondoffset)
Xlength=ZRail[1][0]
Ylength=ZRail[1][1]
#Holes
holes=[]
holes.extend(populateholes(ZRailNutHoles,NutHoleRadius))
#cutouts
cutouts=[]
cutouts.extend(populatecutouts(ZRailBoltSlides))
#Make the part
ZRail1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(ZRail1)
#increase offset and make part again if needed
secondoffset = increaseoffsets("y",secondoffset)
ZRail2 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(ZRail2)


















#DRAW Z MOTOR MOUNT
#   Fillet edge 1,3,6,24,

#   heck, make two of these too, it could use reinforcing.
#   This is supposed to drop the middle of the MotorMount(the motor shaft) right between the Y and Z bearings.

ZMotorMount = [[0,0] , [FudgeFactor+(MotorSize/2+BearingRadius+BearingRadiusPlusRail)+SpindleClampWidth,FudgeFactor+MotorSize+FudgeFactor]]

ZMotorMountBoltSlides = [[ZMotorMount[1][0]-SpindleClampWidth+NutHoleOffset-BoltRadius,FudgeFactor*2],\
              	         [ZMotorMount[1][0]-SpindleClampWidth+NutHoleOffset+BoltRadius,ZMotorMount[1][1]-FudgeFactor*2],\
		                 [ZMotorMount[1][0]-NutHoleOffset-BoltRadius,FudgeFactor*2],\
              	         [ZMotorMount[1][0]-NutHoleOffset+BoltRadius,ZMotorMount[1][1]-FudgeFactor*2]]

ZMotorSpot = [[FudgeFactor + MotorSize/2, ZMotorMount[1][1]/2]]

MotorMountHoles=makemotorholes(ZMotorSpot,MotorSize,Nema24,Nema23,Nema17)


#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#cutouts=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)
#increaseoffsets(axis,secondoffset)
#populateholes(name,radius)
#populatecutouts(name)
#makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)

#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.y = 0.0
secondoffset = increaseoffsets("x",secondoffset)
Xlength=ZMotorMount[1][0]
Ylength=ZMotorMount[1][1]
#Holes
holes=[]
holes.extend(populateholes(ZMotorSpot,ZRodBearingDiameter/2)) 
holes.extend(populateholes(MotorMountHoles,2.5))
#cutouts
cutouts=[]
cutouts.extend(populatecutouts(ZMotorMountBoltSlides))
#Make the part
ZMotorMount1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(ZMotorMount1)
#increase offset and make part again if needed
secondoffset = increaseoffsets("y",secondoffset)
ZMotorMount2 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(ZMotorMount2)
















#DRAW NUTHOLDER
#   Fillet 1,3,6,15,

#   make one of these, it will not torque due to having two bolts. Z rod should come down through the middle of it. Z motor mount provides wiggle room in X direction(of machine). This needs to provide wiggle room in Y direction(of machine). Do a cutout.

#   The bolts for this are going to line up with the Y gantry bearing bolts and the Z gantry bearing bolts. The rod will fit between.

NutHolderThing=[[0,0],[BearingDiameter*2,ZMotorMount[1][1]]]

ZRodCutOut =[[NutHolderThing[0][0]+BearingDiameter/2,NutHolderThing[1][1]/2-ZRodDiameter/2] , \
             [NutHolderThing[1][0]-BearingDiameter/2,NutHolderThing[1][1]/2+ZRodDiameter/2]]

#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.y = 0.0
secondoffset = increaseoffsets("x",secondoffset)
Xlength=NutHolderThing[1][0]
Ylength=NutHolderThing[1][1]
#Holes
holes=[]
#cutouts
cutouts=[]
cutouts.extend(populatecutouts(ZRodCutOut))
#Make the part
NutHolder1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(NutHolder1)
#increase offset and make part again if needed
#It's not.





#DRAW Y GANTRY
#   fillet 1,3,6,47,

YGantry = [[0,0] , [YGantryWidth,YGantryHeight]]

YGantryBoltHoles = [[YGantryLeftRollerX,YGantryTopBearingY],\
              	    [YGantryZRollerX,YGantryTopBearingY],\
	        	    [YGantryRightRollerX,YGantryTopBearingY],\
              	    [YGantryZRollerX,FudgeFactor+BearingRadius]]

YMotorSpot = [[YGantry[1][0]/2, YGantry[1][1]-FudgeFactor-SkateBearingDiameter-FudgeFactor-MotorSize/2]]

MotorMountHoles=makemotorholes(YMotorSpot,MotorSize,Nema24,Nema23,Nema17)

#second and first two are for Z bearings
#third and fourth two are for nut holder
#fifth and sixth two are for bottom Y bearings
#last two are for an idler bearing to allow Y belt to tighten
SlideyBoltHoles =[[YGantryZSlideyX-SpringSpace,YGantryTopBearingY-ThreeEighthsInch/2] , \
                  [YGantryZSlideyX+SpringSpace,YGantryTopBearingY+ThreeEighthsInch/2] , \
                  [YGantryZSlideyX-SpringSpace,FudgeFactor+BearingRadius-ThreeEighthsInch/2] , \
                  [YGantryZSlideyX+SpringSpace,FudgeFactor+BearingRadius+ThreeEighthsInch/2] , \
                  [YGantryLeftRollerX-BoltRadius,YGantryBottomBearingY+SpringSpace*4] , \
                  [YGantryLeftRollerX+BoltRadius,YGantryTopBearingY-SpringSpace*4] , \
                  [YGantryZRollerX-BoltRadius,YGantryBottomBearingY+SpringSpace*4] , \
                  [YGantryZRollerX+BoltRadius,YGantryTopBearingY-SpringSpace*4] , \
                  [YGantryLeftRollerX-ThreeEighthsInch/2,YGantryBottomBearingY-SpringSpace] , \
                  [YGantryLeftRollerX+ThreeEighthsInch/2,YGantryBottomBearingY+SpringSpace] , \
                  [YGantryRightRollerX-ThreeEighthsInch/2,YGantryBottomBearingY-SpringSpace] , \
                  [YGantryRightRollerX+ThreeEighthsInch/2,YGantryBottomBearingY+SpringSpace] , \
	        	  [YGantry[1][0]/2-MotorSize,YGantryHeight-SkateBearingRadius-SkateBearingBoltRadius] , \
		          [YGantry[1][0]/2+MotorSize,YGantryHeight-SkateBearingRadius+SkateBearingBoltRadius]]


#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.y = 0.0
secondoffset = increaseoffsets("x",secondoffset)
Xlength=YGantry[1][0]
Ylength=YGantry[1][1]
#Holes
holes=[]
#holes.extend(populateholes(YMotorSpot,38.1/2)) #Not needed any more, motor is mounted on other side.
holes.extend(populateholes(MotorMountHoles,2.5))
holes.extend(populateholes(YGantryBoltHoles,BearingBoltRadius))
#cutouts
cutouts=[]
cutouts.extend(populatecutouts(SlideyBoltHoles))
#Make the part
YGantry1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(YGantry1)





#YMOTORMOUNT
#   I need two of these
#   Fillet edges?


YMotorMount = [[0,0] , [MotorSize+FudgeFactor*2,MotorSize+FudgeFactor*2]]

MotorSpot = [[(MotorSize+FudgeFactor*2)/2,(MotorSize+FudgeFactor*2)/2]]

MotorMountHoles=makemotorholes(MotorSpot,MotorSize,Nema24,Nema23,Nema17)

SqueezyBit = [[YMotorMount[1][0]/2-FudgeFactor*3,YMotorMount[0][1]],\
              [YMotorMount[1][0]/2+FudgeFactor*3,YMotorMount[1][1]]]

#firstoffset = FreeCAD.Vector(blah,blah,0)
#holes=[[radius,Xoffset,Yoffset],etc]
#cutouts=[[length,width,Xoffset,Yoffset],etc]
#secondoffset = FreeCAD.Vector(blah,blah,0)
#increaseoffsets(axis,secondoffset)
#populateholes(name,radius)
#populatecutouts(name)
#makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)

#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.y = 0.0
secondoffset = increaseoffsets("x",secondoffset)
Xlength=YMotorMount[1][0]
Ylength=YMotorMount[1][1]
edges=[]
#holes=[[radius,Xoffset,Yoffset],etc]
holes=[]
holes.extend(populateholes(MotorSpot,MotorHoleDiameter/2))
holes.extend(populateholes(MotorMountHoles,2.5))
#cutouts=[[length,width,Xoffset,Yoffset],etc]
cutouts=[]
cutouts.extend(populatecutouts(SqueezyBit))
#make the first clamp
YMotorMount1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(YMotorMount1)
#increase the offsets and make the second clamp.
secondoffset = increaseoffsets("y",secondoffset)
YMotorMount2 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(YMotorMount2)












#DRAW Y RAIL PIECE (1)
#	calculation done above for lengths
#   fillet 1,3,6,19

YRail = [[0,0] , [YRailLength,YRailHeight]]

YRailBoltHoles = [[YRail[0][0]+NutHoleOffset,YRail[1][1]-MDF/2],\
              	   [YRail[1][0]/2,YRail[1][1]-MDF/2],\
              	   [YRail[1][0]-NutHoleOffset,YRail[1][1]-MDF/2],\
              	   [YRail[0][0]+NutHoleOffset,YRail[0][0]+MDF/2],\
              	   [YRail[1][0]/2,YRail[0][0]+MDF/2],\
              	   [YRail[1][0]-NutHoleOffset,YRail[0][0]+MDF/2]]

YRailNutHoles =  [[YRail[0][0]+NutHoleOffset,YRail[1][1]/2],\
              	  [YRail[1][0]-NutHoleOffset,YRail[1][1]/2]]

#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.y = 0.0
secondoffset = increaseoffsets("x",secondoffset)
Xlength=YRail[1][0]
Ylength=YRail[1][1]
#Holes
holes=[]
holes.extend(populateholes(YRailBoltHoles,BoltRadius))
holes.extend(populateholes(YRailNutHoles,NutHoleRadius))
#cutouts
cutouts=[]
#Make the part
YRail1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(YRail1)








#DRAW Y TOP AND BOTTOM MIDDLE PIECES (2)
#   fillet 1,3,6,16

YRailTopBottom = [[0,0] , [YRailLength,YRailDepth]]

YRailNutHoles = [[YRailTopBottom[0][0]+NutHoleOffset,YRailTopBottom[1][1]-NutHoleOffset],\
              	   [YRailTopBottom[1][0]/2,YRailTopBottom[1][1]-NutHoleOffset],\
              	   [YRailTopBottom[1][0]-NutHoleOffset,YRailTopBottom[1][1]-NutHoleOffset],\
              	   [YRailTopBottom[0][0]+NutHoleOffset,YRailTopBottom[0][1]+NutHoleOffset],\
              	   [YRailTopBottom[1][0]-NutHoleOffset,YRailTopBottom[0][1]+NutHoleOffset]]

#set up inputs to FreeCAD function
#firstoffset already correct from before
#secondoffset.y = 1000.0
#secondoffset.x = 0.0
secondoffset = increaseoffsets("y",secondoffset)
Xlength=YRailTopBottom[1][0]
Ylength=YRailTopBottom[1][1]
#Holes
holes=[]
holes.extend(populateholes(YRailNutHoles,NutHoleRadius))
#cutouts
cutouts=[]
#Make the part
YTop1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(YTop1)
#increase offset and make part again if needed
secondoffset = increaseoffsets("y",secondoffset)
YBottom1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(YBottom1)












#DRAW X GANTRY PIECE ONE
#	XGantryHeight,XGantryWidth,XGantryTopBearingY,XGantryBottomBearingY,XGantryBearingXLeft,
#	MotorBeltHole, TightenerBeltHole,
#	XGantryBearingXRight,XGantryLowerRightYRailCorner all calculated above
#   fillet 1,3,6,32

XGantry = [[0,0] , [XGantryWidth,XGantryHeight]]

#bolt holes for the bearings that ride on top of X rail.
XGantryBearingBoltHoles = [[XGantryBearingXLeft,XGantryTopBearingY],\
              	   	   [XGantryBearingXRight,XGantryTopBearingY]]

#Bolt holes that connect the Y Rail
XGantryBoltHoles = [[XGantryLowerRightYRailCorner[0]-MDF/2,XGantryLowerRightYRailCorner[1]+YRailHeight/2],\
              	    [XGantryLowerRightYRailCorner[0]-MDF-YRailDepth+NutHoleOffset,XGantryLowerRightYRailCorner[1]+MDF/2],\
		    [XGantryLowerRightYRailCorner[0]-MDF-YRailDepth+NutHoleOffset,XGantryLowerRightYRailCorner[1]+YRailHeight-MDF/2]]

#X axis motor holes
XMotorSpot = [[XGantryLowerRightYRailCorner[0]-MDF-MotorSize/2-FudgeFactor,XGantryLowerRightYRailCorner[1]+MDF+MotorSize/2+FudgeFactor]]

MotorMountHoles=makemotorholes(XMotorSpot,MotorSize,Nema24,Nema23,Nema17)

#bolt slidey holes for the bearings that ride on botton of rail, plus springs.
SlideyBoltHoles = [[XGantryBearingXLeft-BearingBoltRadius,XGantryBottomBearingY-SpringSpace] , \
                   [XGantryBearingXLeft+BearingBoltRadius,XGantryBottomBearingY+SpringSpace] , \
                   [XGantryBearingXRight-BearingBoltRadius,XGantryBottomBearingY-SpringSpace] , \
                   [XGantryBearingXRight+BearingBoltRadius,XGantryBottomBearingY+SpringSpace]] 

#single slider for the ilder pulley bolts
IdlerPulleyTrack = [[XGantry[0][0]+20,MiddleOfXRail-SkateBearingBoltRadius] , \
                    [XGantry[1][0]-20,MiddleOfXRail+SkateBearingBoltRadius]]

#These are bolt holes on either side of the belt location, and below, to clamp the belt in with a piece of wood.
BeltHoleNutHoles = [[TightenerBeltHole[0]-5-12,TightenerBeltHole[1]-5] , \
	                [TightenerBeltHole[0]+5+12,TightenerBeltHole[1]-5]]

#set up inputs to FreeCAD function
#firstoffset already correct from before
secondoffset.x = 0.0
secondoffset.y = 1000.0
#secondoffset = increaseoffsets("x",secondoffset)
Xlength=XGantry[1][0]
Ylength=XGantry[1][1]
#Holes
holes=[]
holes.extend(populateholes(XGantryBearingBoltHoles,BearingBoltRadius))
holes.extend(populateholes(XMotorSpot,MotorHoleDiameter/2))
holes.extend(populateholes(MotorMountHoles,2.5))
holes.extend(populateholes(BeltHoleNutHoles,BoltRadius))
#cutouts
cutouts=[]
cutouts.extend(populatecutouts(SlideyBoltHoles))
cutouts.extend(populatecutouts(IdlerPulleyTrack))
#Make the part
XGantry1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(XGantry1)
#redo holes variable for second X gantry part. see notes above.
holes=[]
holes.extend(populateholes(XGantryBearingBoltHoles,BearingBoltRadius))
holes.extend(populateholes(XMotorSpot,SkateBearingRadius))
holes.extend(populateholes(BeltHoleNutHoles,BoltRadius))
secondoffset = increaseoffsets("x",secondoffset)
#Make the second part
XGantry2 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
Part.show(XGantry2)




#If they need a table
#draw end caps (2)
#draw X rails (2)
#draw outside pieces (2)
#draw inside pieces (2)


#Table Notes: No fudge room on the table! 
#If someone wants extra room for clamps, they need to ask for it in X/Y/Z travel space. 
#I don't know what they'll want for clamp space and it's a PITA for both of us to try to...

if Table == "nope":  #they do not have a table, we need to make one
    
    #X RAIL SUPPORTS
    #   fillet 1,3,6,16
    
    LowerCorner = [0,0]
    UpperCorner = [XTravel+XGantryWidth,XRailThickness]
    BoltHoles = [[LowerCorner[0]+NutHoleOffset,UpperCorner[1][1]/2] , \
                [UpperCorner[0]/4,UpperCorner[1][1]/2] , \
                [UpperCorner[0]/2,UpperCorner[1][1]/2] , \
                [UpperCorner[0]*3/4,UpperCorner[1][1]/2] , \
                [UpperCorner[0]-NutHoleOffset,UpperCorner[1][1]/2]] 
    
    #set up inputs to FreeCAD function
    #firstoffset already correct from before
    secondoffset.x = 0.0
    secondoffset.y = 3000.0
    #secondoffset = increaseoffsets("y",secondoffset)
    Xlength=UpperCorner[0]
    Ylength=UpperCorner[1]
    #Holes
    holes=[]
    holes.extend(populateholes(BoltHoles,QuarterInch/2))
    #cutouts
    cutouts=[]
    #Make the part
    XRail1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    Part.show(XRail1)
    #increase offset and make part again if needed
    secondoffset = increaseoffsets("y",secondoffset)
    XRail2 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    Part.show(XRail2)
    
    
    
    
    # ENDCAP   
    #   ~6"(150mm) tall, thicker is better, but more expensive, as long as it needs to be for Y travel
    #   2 rails in middle, put them at 1/3 and 2/3 distance.
    #   Put on stick out bits to lash the belts to. give 50mm for that.
    #   This is held up to the rail for dimensions.
    #   fillet 1,3,6,31
    
    LowerCorner = [YRail[0][0]-MDF-50,0]
    UpperCorner = [YRail[1][0]+MDF+50,25*6]
    
    BeltSpot = [[LowerCorner[0]+50-25,UpperCorner[1]-Rail-25-SkateBearingRadius-10],\
                [LowerCorner[0]+50,UpperCorner[1]-Rail-25-SkateBearingRadius],\
                [UpperCorner[0]-50,UpperCorner[1]-Rail-25-SkateBearingRadius-10],\
                [UpperCorner[0]-50+25,UpperCorner[1]-Rail-25-SkateBearingRadius]]
    
    BeltSpotBoltHoles = [[BeltSpot[0][0]-QuarterInch,BeltSpot[1][1]+QuarterInch],\
                         [BeltSpot[1][0]+QuarterInch,BeltSpot[1][1]+QuarterInch],\
                         [BeltSpot[2][0]-QuarterInch,BeltSpot[3][1]+QuarterInch],\
                         [BeltSpot[3][0]+QuarterInch,BeltSpot[3][1]+QuarterInch]]
    #Note, I need the middle supports to be sunk a bit so I can lay table and some sacrificial MDF down.
    BoltHoles = [[YRail[0][0]+BearingAssyToRail+MDF+MDF/2,NutHoleOffset] , \
                [YRail[0][0]+BearingAssyToRail+MDF+MDF/2,UpperCorner[1]-NutHoleOffset] , \
                \
                [YRail[1][0]/3,NutHoleOffset] , \
                [YRail[1][0]/3,UpperCorner[1]-NutHoleOffset-25],\
                \
                [YRail[1][0]*2/3,NutHoleOffset] , \
                [YRail[1][0]*2/3,UpperCorner[1]-NutHoleOffset-25],\
                \
                [YRail[1][0]-BearingAssyToRail-MDF-MDF/2,NutHoleOffset] , \
                [YRail[1][0]-BearingAssyToRail-MDF-MDF/2,UpperCorner[1]-NutHoleOffset]] 
    
    #set up inputs to FreeCAD function
    firstoffset.x = (YRail[0][0]-MDF-50)
    #secondoffset.x = 0.0
    #secondoffset.y = 2000.0
    secondoffset = increaseoffsets("y",secondoffset)
    Xlength=UpperCorner[0]-LowerCorner[0]
    Ylength=UpperCorner[1]
    #Holes
    holes=[]
    holes.extend(populateholes(BoltHoles,QuarterInch/2))
    holes.extend(populateholes(BeltSpotBoltHoles,QuarterInch/2))
    #cutouts
    cutouts=[]
    cutouts.extend(populatecutouts(BeltSpot))
    #Make the part
    Endcap1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    Part.show(Endcap1)
    #increase offset and make part again if needed
    secondoffset = increaseoffsets("y",secondoffset)
    Endcap2 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    Part.show(Endcap2)
       
    
    
    
    
    
    #X side
    #	~6"(150mm) tall, as long as it needs to be for X travel
    #       Note! The top of the rail is meant to be flush with the side. Easier postitioning calculations...
    #	bolt holes for rail. 
    #	nut holes for endcap connection
    #   fillet 1,3,6,20,
    LowerCorner = [0,0]
    UpperCorner = [XTravel+XGantryWidth,25*6]
    
    NutHoles = [[LowerCorner[0]+NutHoleOffset,LowerCorner[1]+NutHoleOffset] , \
             [LowerCorner[0]+NutHoleOffset,UpperCorner[1]-NutHoleOffset] , \
             [UpperCorner[0]-NutHoleOffset,LowerCorner[1]+NutHoleOffset] , \
            [UpperCorner[0]-NutHoleOffset,UpperCorner[1]-NutHoleOffset]] 
    
    BoltHoles = [[LowerCorner[0]+NutHoleOffset,UpperCorner[1]-Rail-25] , \
            [UpperCorner[0]/4,UpperCorner[1]-Rail-25] , \
            [UpperCorner[0]*2/4,UpperCorner[1]-Rail-25] , \
            [UpperCorner[0]*3/4,UpperCorner[1]-Rail-25] , \
            [UpperCorner[0]-NutHoleOffset,UpperCorner[1]-Rail-25]] \
    
    #set up inputs to FreeCAD function
    #firstoffset needs correction.
    firstoffset.x = 0.0
    secondoffset.x = 1000.0
    secondoffset.y = 2000.0
    #secondoffset = increaseoffsets("y",secondoffset)
    Xlength=UpperCorner[0]
    Ylength=UpperCorner[1]
    #Holes
    holes=[]
    holes.extend(populateholes(NutHoles,NutHoleRadius))
    holes.extend(populateholes(BoltHoles,QuarterInch/2))
    #cutouts
    cutouts=[]
    #Make the part
    XSide1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    Part.show(XSide1)
    #increase offset and make part again if needed
    secondoffset = increaseoffsets("y",secondoffset)
    XSide2 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    Part.show(XSide2)
    
    
    
    # X internal table supports
    
    #	as long as it needs to be for X travel
    #	keep bolt holes for rail, in case someone wants to extend them for extra stability. 
    #	Nix the end bolt holes though. They're in the way. Someone else may want them though.... leave code.
    #	nut holes for endcap connection
    #   fillet 1,3,6,18
    
    LowerCorner = [0,0]
    UpperCorner = [XTravel+XGantryWidth,(6.0*25)-25]
    
    NutHoles = [[LowerCorner[0]+NutHoleOffset,LowerCorner[1]+NutHoleOffset] , \
             [LowerCorner[0]+NutHoleOffset,UpperCorner[1]-NutHoleOffset] , \
             [UpperCorner[0]-NutHoleOffset,LowerCorner[1]+NutHoleOffset] , \
             [UpperCorner[0]-NutHoleOffset,UpperCorner[1]-NutHoleOffset]] 
    
    BoltHoles = [[LowerCorner[0]+NutHoleOffset,UpperCorner[1]-Rail] , \
            [UpperCorner[0]/4,UpperCorner[1]-Rail] , \
            [UpperCorner[0]*2/4,UpperCorner[1]-Rail] , \
            [UpperCorner[0]*3/4,UpperCorner[1]-Rail] , \
            [UpperCorner[0]-NutHoleOffset,UpperCorner[1]-Rail]] \
    
    #set up inputs to FreeCAD function
    #firstoffset needs correction.
    firstoffset.x = 0.0
    secondoffset.x = 3000.0
    secondoffset.y = 2000.0
    #secondoffset = increaseoffsets("y",secondoffset)
    Xlength=UpperCorner[0]
    Ylength=UpperCorner[1]
    #Holes
    holes=[]
    holes.extend(populateholes(NutHoles,NutHoleRadius))
    holes.extend(populateholes(BoltHoles,QuarterInch/2))
    #cutouts
    cutouts=[]
    #Make the part
    XInternal1 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    Part.show(XInternal1)
    #increase offset and make part again if needed
    secondoffset = increaseoffsets("y",secondoffset)
    XInternal2 = makethepart(Xlength,Ylength,firstoffset,holes,cutouts,secondoffset)
    Part.show(XInternal2)
    













#Fuck I hope this works...
Gui.activeDocument().activeView().viewTop()
Gui.SendMsgToActiveView("ViewFit")

