#!/usr/bin/python

#	This should generate geometry for the third version of CNC wood router.
#	(moveable gantry. chain or belt on X and Y, Z is screw)
#	Written by Tony Diethelm
#	I am an American, and think in Inches... 
#	As this is in mm the whole way, I use:
#		25mm whenever I need "about an inch" on something.
#		20mm whenever I need "about 3/4 an inch" on something.
#	tonydiethelm@gmail.com
#
#
#
#
#	Notes:
#	The first and second versions were not precise because they were not tight on their roller bearings.
#		This one needs to be really snug.
#	I'm using 3/4" MDF.
#	Assume NEMA23 motor mounts
#		60mm wide plate. hole is 38.1mm diameter. mounting holes are 6.43mm from edges. 5mm Hole.
#	hole locations are referenced to center of hole.
#	All nut holes are a Diameter away from the end.
#	This uses V groove 3/8" bearings and American bolts for most everything.
#	Idle rollers are made from bare skate bearings on 8mm bolts.
#       MDF connection uses 1/4" bolts. V groove bearings use 3/8" bolts. Idler rollers use 8mm bolts.
#   I'm using 3/4" L sections from Home Depot/Lowes for my railing. If you're using something else, change the scripts! Also, I just screwed mine into the wood. If you want fancy adjustment capability, well... 
#	See each section for assumptions while calculating.
#	Use variables instead of numbers EVERYWHERE.
#	This assumes that the wasted space on XY axes will be used for clamping and the like.
#		If you want more clamping space, put in more XY required distance.
#       I don't want the headache of putting in fudge room on the table.
#	I assume the table is of equal height with the rails.
#	Z travel assumes a distance from X rail to bottom of Y gantry. Z rail will be able to travel that... 
#		It does not count end mill length or chuck length. Add that in yourself.
#	
#
#
#	To Do List:
#	Get rev 1 done
#	calculate wasted XY axes space and put it in the notes.
#   Check that the table calculations still work. I recently changed them to be 6" instead of 1ft, and it probably wreaked havoc. 
#
#
#
#	rough outline:
# Ask them for their information.
#	assume a router clamp width for future calculations
#	ask router diameter
#	ask Z rod usable travel length
#	ask Z rod diameter
#	ask vac tube diameter
#	ask if the table it's going to sit on is already pre built.
#		Yes)
#			ask for table dimensions. Note that we're assuming they'll bolt the rails onto the table sides.
#			calculate Y rail length.
#		No)
#			ask for X, Y
#	ask Z required distances.
#	ask if they want Z overtravel (to cut the table)
#
#	calculated constants based on their input, used for later geometry.
#
#	Draw spindle clamps
#		use router diameter+1mm
#
#	draw Z motor mount (2)
#
#	draw Y gantry
#		calculate width from router clamp width
#
#	draw Y top/bottom pieces (2)
#		calculate length from needed Y-(Y gantry width)
#
#	draw Y middle piece
#		calculate length from needed Y-(Y gantry width)
#
#	draw X gantry pieces (2)
#		calculate everything so the router bit sits in the middle of the rail bearings.
#		assume the rail is 50mm thick.
#
#	draw belt holding pieces (6)
#
#	If they need a table
#		draw end caps (2)
#
#		draw outside pieces (2)
#
#		draw inside pieces (2)
#


import sys

# Change this stuff for your machine.
# I originally had this stuff as a bunch of inputs/raw_inputs asking questions as a script. It was pointed out to me that it would be better to just have people modify the script to suit them instead of typing things in each time it was ran. Good Advice. I took it. 
# All dimensions are assumed to be in millimeters.
# This also assumes each part is in reference to (0,0) and that you'll move it each time. 

# Ask them for their information.
#	assume a router clamp width for future calculations
#	ask router diameter
#	ask Z rod usable travel length
#	ask Z rod diameter
#	ask vac tube diameter
#	ask if the table it's going to sit on is already pre built.
#		Yes)
#			ask for table dimensions. Note that we're assuming they'll bolt the rails onto the table sides.
#			calculate Y rail length.
#		No)
#			ask for X, Y
#	ask Z required distances.
#	ask if they want Z overtravel (to cut the table)


SpindleClampWidth = 100 #This is the width of the spindle clamp. I should make this calculated from the spindle diameter. I was trying to minimize this to keep Y axis wastage to a minimum.
SpindleDiameter = 65 #If you're using a hand router, and it has different diamters along the Z axis... You'll have to think on your feet here.
ZRodLength = 381 #This is usable Z length, not counting mounting bearings or attachment shaft.
ZRodDiameter = 11.2 #This is the diameter of the screw. I fudge wiggle room on later, so don't do it here.
ZRodBearingDiameter = 24 #This is the diameter of the mounting bearing for the Z rod. 
VacTubeDiameter = 12.0 #I was using a small tube as a vac system. It didn't work well frankly, so you might ignore this. 




Table = "y" #Yes, you already have a table to put the gantry on. You don't need one. change to "n" if you want one and the script will spit out parts for a crappy table.
if Table == "y":
    TableX = 1474.5 #This is set for my table. This is actual length of the X rail, not cutting length. 
    TableY = 569 #This is set for my table. This is the Y distance between XRail to XRail, not cutting length. 
else: #If you want extra space around your table, ask for it in X and Y travel.
    # I set these to 0 so Python wouldn't wig out. 
    XTravel = 0# How long of X travel do you want?
    YTravel = 0# How long of Y travel do you want?

#Note that the Z travel is assuming a distance between the top of the X rail/table and the Y gantry. 
ZTravel = 25.4*4 #What amount of Z travel (space between X rail height and bit) should there be?
BitAndChuck = 60 #What's the approx length of your bit and chuck? Overestimate.
ZOverTravel = 25.4*6/4 #What amount of Z overtravel (to cut below the X rail line) should there be? This allows you to cut into your own table. I thought it would be nice to be able to custom cut your own table.
XGantryWidth = 25*8 #How wide do you want the X axis Gantry to be? Wider = More Stable of course. I could calculate this, but I thought folks might want to choose this for themselves. 























# Set up the constants
# These are all the things that will probably not change from machine to machine. Definitions, MDF sizes, Rail sizes, etc.
QuarterInch = 6.35
ThreeQuarterInch = 19.05
ThreeEighthsInch = 9.525
BoltRadius = QuarterInch/2
BearingBoltRadius = ThreeEighthsInch/2
MDF = ThreeQuarterInch
Rail = ThreeQuarterInch  #I use 3/4" L bracket from Home Depot/Lowes.
NutHoleRadius = 25.4/2
NutHoleOffset = NutHoleRadius*2
BearingDiameter = 30.73 #From spec sheet
BearingRadius = BearingDiameter/2
BearingAssyToRail = 14.3 #Measured by Tony. Badly
BearingRadiusPlusRail = 32.4 #Measured by Tony. Badly. 
IdlerPulleyDiameter = 28 #Measured by Tony. Badly
PulleyRadius = 8 #Measured by Tony. Badly
Nema23MotorMount = 60
SkateBearingDiameter = 22
SkateBearingRadius = SkateBearingDiameter/2
SkateBearingBoltDiameter = 8
SkateBearingBoltRadius = 4


# These are soft constants. 
#They probably won't change, but might. If you want more room to put in the X motor for example, you could increase the height of the Y rail. Perhaps you might want to make the nutholder thinner to save room on the Y axis. Perhaps you want more spring space. Dunno...
YRailHeight = 120 #This is the width of the piece that the Y rails sit on. 
YRailDepth = 80
NutHolder = 60 # The nutholder space is the space with the two vertical slits on the Y gantry. 
NutHolder = 75 #why did I do this? sigh... This was the one that went into my machine. It can definately be made smaller, which will save wasted Y space. 
FudgeFactor = 5 #I used this around edges to give myself some room. 
SpringSpace = 15 #Note, this is to give some room for the compressed spring, and is NOT indicative of how large the slidey hole will be. Slidey holes are usually twice spring space.
XRailThickness = 50 #This is thickness of the piece of wood the X rails sits on. You'll definately want to change this for your machine. 





# calculated constants
# 
ZRodHoleDiameter = ZRodDiameter+10  #Wiggle Room
# note that Z rail length needs to be long enough for the lead screw or it'll poke out the bottom. No Bueno!
ZRailLength = SpringSpace + (BearingDiameter/2 + BearingRadiusPlusRail)*2 + YRailHeight + BitAndChuck + ZTravel + ZOverTravel
if ZRodLength > ZRailLength:
	ZRailLength = ZRodLength




#Y gantry calculations
#left to right
YGantryWidth = FudgeFactor + BearingDiameter + NutHolder + BearingRadius + BearingRadiusPlusRail + SpindleClampWidth + BearingRadius + BearingRadiusPlusRail + SpringSpace + FudgeFactor + BearingDiameter + FudgeFactor
#bottom to top
YGantryHeight = FudgeFactor + SpringSpace + BearingRadiusPlusRail + YRailHeight + BearingRadiusPlusRail + BearingRadius + FudgeFactor+ Nema23MotorMount + FudgeFactor + SkateBearingDiameter + FudgeFactor
# X and Y locations for the rail bearings
YGantryTopBearingY = FudgeFactor + SpringSpace + BearingRadiusPlusRail + YRailHeight + BearingRadiusPlusRail
YGantryBottomBearingY = FudgeFactor + SpringSpace
YGantryZRollerX = FudgeFactor +BearingDiameter + NutHolder + BearingRadius
YGantryZSlideyX = YGantryZRollerX + BearingRadiusPlusRail + SpindleClampWidth + BearingRadiusPlusRail
YGantryLeftRollerX = FudgeFactor + BearingRadius
YGantryRightRollerX = YGantryWidth - FudgeFactor - BearingRadius



# X gantry calculations
#bottom to top
XGantryHeight = FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + Rail + ZTravel + BitAndChuck + YRailHeight + BearingRadiusPlusRail + BearingRadius + FudgeFactor+ Nema23MotorMount + FudgeFactor + SkateBearingDiameter + FudgeFactor
#left to right
XGantryWidth = YRailDepth + MDF + BearingAssyToRail + MDF + MDF + NutHoleOffset + NutHoleRadius*2 + FudgeFactor + SpindleDiameter/2 + FudgeFactor
#positions for the X rail bearings, top and bottom, X and Y
XGantryTopBearingY = FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + BearingRadiusPlusRail
XGantryBearingXLeft = FudgeFactor + BearingBoltRadius
XGantryBearingXRight = XGantryWidth - FudgeFactor - BearingBoltRadius
XGantryBottomBearingY = FudgeFactor + SpringSpace
#This is the lower right corner of the Y rail atachments, for easy calculations later.
XGantryLowerRightYRailCorner = [FudgeFactor+YRailDepth + MDF, FudgeFactor + SpringSpace + BearingRadiusPlusRail + XRailThickness + Rail + ZTravel + BitAndChuck]
#I need these to calculate where the holes go on the table endcaps and the X gantry
MiddleOfXRail = XGantryTopBearingY-BearingRadiusPlusRail-XRailThickness/2
# these are locations for the holes for the Y belts. Belts should go through these holes and fold down.
# Make the holes go up from this location.
MotorBeltHole = [XGantryLowerRightYRailCorner[0],XGantryLowerRightYRailCorner[1]+YRailHeight+BearingRadiusPlusRail+BearingRadius+FudgeFactor+Nema23MotorMount/2-PulleyRadius]
TightenerBeltHole = [XGantryLowerRightYRailCorner[0],XGantryHeight-FudgeFactor]




if Table == "y":
	YRailLength = TableY + (BearingAssyToRail*2)
else:
	YRailLength = YTravel + YGantryWidth


SpindleClampLength = 10+FudgeFactor+SpindleDiameter+FudgeFactor+NutHoleRadius+FudgeFactor+NutHoleOffset








#	Begin drawing all the pieces

#	Draw spindle clamps
#		use router diameter+1mm
#		space for clamping bolt is 15mm

SpindleClampCorner = [[0,0] , [SpindleClampWidth,SpindleClampLength]]

SpindleClampNutHoles = [[SpindleClampCorner[0][0]+NutHoleOffset,SpindleClampCorner[0][1]+NutHoleOffset] , \
           		[SpindleClampCorner[1][0]-NutHoleOffset,SpindleClampCorner[0][1]+NutHoleOffset]] 

SpindleHoleLocation = [SpindleClampWidth/2,SpindleClampCorner[1][1]-10-FudgeFactor-(SpindleDiameter/2)] 

VacTube = [SpindleHoleLocation[0]-(SpindleDiameter/2)-VacTubeDiameter,SpindleHoleLocation[1]+SpindleDiameter/4]

TightenerSpace = [[SpindleClampCorner[0][0],SpindleClampCorner[1][1]-15],\
                  [SpindleClampCorner[0][0]+15,SpindleClampCorner[1][1]],\
                  [SpindleClampCorner[1][0]-15,SpindleClampCorner[1][1]-15],\
                  [SpindleClampCorner[1][0],SpindleClampCorner[1][1]]]

SqueezyBit = [[SpindleClampCorner[1][0]/2-5,SpindleClampCorner[0][1]+15],\
              [SpindleClampCorner[1][0]/2+5,SpindleClampCorner[1][1]]]

print 'Spindle Clamps (make two)'
print 'Make a rectangle from ' + str(SpindleClampCorner[0]) + 'to ' + str(SpindleClampCorner[1]) + '.'
print 'Make a circle of radius ' + str(SpindleDiameter/2) + ' at ' + str(SpindleHoleLocation) + '.'

#for index, item in enumerate(L):
#        print index, item
#for index in range(len(L)):
#        print index
for x in range(len(SpindleClampNutHoles)):
	print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(SpindleClampNutHoles[x]) + '.'

print 'Make a circle of radius ' + str(VacTubeDiameter/2) + ' at ' + str(VacTube) + '.'
print 'Make a rectangle with first position ' + str(SqueezyBit[0]) + ' and second position ' + str(SqueezyBit[1]) + '.'
print 'Cut out a rectangle with first position ' + str(TightenerSpace[0]) + ' and second position ' + str(TightenerSpace[1]) + '.'
print 'Cut out a rectangle with first position ' + str(TightenerSpace[2]) + ' and second position ' + str(TightenerSpace[3]) + '.'
print ' '
print ' '



#	Draw Z rails

ZRail = [[0,0] , [SpindleClampWidth,ZRailLength]]
ZRailNutHoles = [[ZRail[0][0]+NutHoleOffset,ZRail[1][1]-NutHoleOffset] , \
           		[ZRail[1][0]-NutHoleOffset,ZRail[1][1]-NutHoleOffset]] 
ZRailBoltHoles = [[ZRail[1][0]/2,ZRail[1][1]/4],\
                  [ZRail[1][0]/2,ZRail[1][1]*3/4]]
ZRailBoltSlides = [[ZRail[0][0]+NutHoleOffset-BoltRadius,MDF/2-BoltRadius],\
              	   [ZRail[0][0]+NutHoleOffset+BoltRadius,ZRail[1][1]/2],\
		   [ZRail[1][0]-NutHoleOffset-BoltRadius,MDF/2-BoltRadius],\
              	   [ZRail[1][0]-NutHoleOffset+BoltRadius,ZRail[1][1]/2]]

print 'Z Rails (make two)'
print 'Make a rectangle from ' + str(ZRail[0]) + 'to ' + str(ZRail[1]) + '.'
for x in range(len(ZRailNutHoles)):
	print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(ZRailNutHoles[x]) + '.'
for x in range(len(ZRailBoltHoles)):
	print 'Make a circle of radius ' + str(BearingBoltRadius) + ' at ' + str(ZRailBoltHoles[x]) + '.'
print 'Cut out a rectangle with first position ' + str(ZRailBoltSlides[0]) + ' and second position ' + str(ZRailBoltSlides[1]) + '.'
print 'Cut out a rectangle with first position ' + str(ZRailBoltSlides[2]) + ' and second position ' + str(ZRailBoltSlides[3]) + '.'
print ' '
print ' '



#	draw Z motor mount
#Note, was too short. Adding bearingradiusplusrail and bearingradius
ZMotorMount = [[0,0] , [FudgeFactor + Nema23MotorMount/2 + NutHolder/2 + BearingRadius + BearingRadiusPlusRail + SpindleClampWidth,FudgeFactor + Nema23MotorMount + FudgeFactor]]
ZMotorMountBoltSlides = [[ZMotorMount[1][0]-SpindleClampWidth+NutHoleOffset-BoltRadius,FudgeFactor*2],\
              	   [ZMotorMount[1][0]-SpindleClampWidth+NutHoleOffset+BoltRadius,ZMotorMount[1][1]-FudgeFactor*2],\
		   [ZMotorMount[1][0]-NutHoleOffset-BoltRadius,FudgeFactor*2],\
              	   [ZMotorMount[1][0]-NutHoleOffset+BoltRadius,ZMotorMount[1][1]-FudgeFactor*2]]

ZMotorSpot = [FudgeFactor + Nema23MotorMount/2, ZMotorMount[1][1]/2]
MotorMountHoles =[[ZMotorSpot[0]-30+6.43,ZMotorSpot[1]-30+6.43] , \
                  [ZMotorSpot[0]-30+6.43,ZMotorSpot[1]+30-6.43] , \
                  [ZMotorSpot[0]+30-6.43,ZMotorSpot[1]+30-6.43] , \
                  [ZMotorSpot[0]+30-6.43,ZMotorSpot[1]-30+6.43]] 


print 'Z motor mount'
print 'Make a rectangle from ' + str(ZMotorMount[0]) + 'to ' + str(ZMotorMount[1]) + '.'
print 'Make a circle of radius ' + str(ZRodBearingDiameter/2) + ' at ' + str(ZMotorSpot) + '.'

for x in range(len(MotorMountHoles)):
	print 'Make a circle of radius ' + str(5.0/2) + ' at ' + str(MotorMountHoles[x]) + '.'


print 'Cut out a rectangle with first position ' + str(ZMotorMountBoltSlides[0]) + ' and second position ' + str(ZMotorMountBoltSlides[1]) + '.'
print 'Cut out a rectangle with first position ' + str(ZMotorMountBoltSlides[2]) + ' and second position ' + str(ZMotorMountBoltSlides[3]) + '.'
print ' '
print ' '











#	draw Y gantry
#		calculate width from router clamp width
#		YGantryWidth, YGantryHeight, YGantryTopBearingY, YGantryZRollerX, YGantryBottomBearingY
#		YGantryLeftRollerX, YGantryRightRollerX, YGantryZSlideyX calculated above


YGantry = [[0,0] , [YGantryWidth,YGantryHeight]]

YGantryBoltHoles = [[YGantryLeftRollerX,YGantryTopBearingY],\
              	   [YGantryZRollerX,YGantryTopBearingY],\
		   [YGantryRightRollerX,YGantryTopBearingY],\
              	   [YGantryZRollerX,FudgeFactor+BearingRadius]]

YMotorSpot = [FudgeFactor + Nema23MotorMount/2, YGantry[1][1] - FudgeFactor - SkateBearingDiameter - FudgeFactor - Nema23MotorMount/2]
MotorMountHoles =[[YMotorSpot[0]-30+6.43,YMotorSpot[1]-30+6.43] , \
                  [YMotorSpot[0]-30+6.43,YMotorSpot[1]+30-6.43] , \
                  [YMotorSpot[0]+30-6.43,YMotorSpot[1]+30-6.43] , \
                  [YMotorSpot[0]+30-6.43,YMotorSpot[1]-30+6.43]] 






#second and first two are for Z bearings
#third and fourth two are for nut holder
#sixth and fifth two are for bottom Y bearings
#last two are for an idler bearing to allow Y belt to tighten
SlideyBoltHoles =[[YGantryZSlideyX-SpringSpace,YGantryTopBearingY-ThreeEighthsInch/2] , \
                  [YGantryZSlideyX+SpringSpace,YGantryTopBearingY+ThreeEighthsInch/2] , \
                  [YGantryZSlideyX-SpringSpace,FudgeFactor+BearingRadius-ThreeEighthsInch/2] , \
                  [YGantryZSlideyX+SpringSpace,FudgeFactor+BearingRadius+ThreeEighthsInch/2] , \
                  [FudgeFactor + BearingDiameter + QuarterInch,SpringSpace] , \
                  [FudgeFactor + BearingDiameter + QuarterInch*2,YGantryTopBearingY] , \
                  [FudgeFactor + BearingDiameter + NutHolder - QuarterInch*2,SpringSpace] , \
                  [FudgeFactor + BearingDiameter + NutHolder - QuarterInch,YGantryTopBearingY] , \
                  [YGantryLeftRollerX-ThreeEighthsInch/2,YGantryBottomBearingY-SpringSpace] , \
                  [YGantryLeftRollerX+ThreeEighthsInch/2,YGantryBottomBearingY+SpringSpace] , \
                  [YGantryRightRollerX-ThreeEighthsInch/2,YGantryBottomBearingY-SpringSpace] , \
                  [YGantryRightRollerX+ThreeEighthsInch/2,YGantryBottomBearingY+SpringSpace] , \
		  [FudgeFactor,YGantryHeight-SkateBearingRadius-SkateBearingBoltRadius] , \
		  [Nema23MotorMount,YGantryHeight-SkateBearingRadius+SkateBearingBoltRadius]]


print 'Y Gantry'
print 'Make a rectangle from ' + str(YGantry[0]) + 'to ' + str(YGantry[1]) + '.'

print 'Make a circle of radius ' + str(38.1/2) + ' at ' + str(YMotorSpot) + '.'
for x in range(len(MotorMountHoles)):
	print 'Make a circle of radius ' + str(5.0/2) + ' at ' + str(MotorMountHoles[x]) + '.'

for x in range(len(YGantryBoltHoles)):
	print 'Make a circle of radius ' + str(BearingBoltRadius) + ' at ' + str(YGantryBoltHoles[x]) + '.'

for x in range(0, len(SlideyBoltHoles), 2):
	print 'Make a rectangle from ' + str(SlideyBoltHoles[x]) + ' to ' + str(SlideyBoltHoles[x+1]) + '.'
print ' '
print ' '




#
#	draw Y rail piece (1)
#		calculation done above for lengths

YRail = [[0,0] , [YRailLength,YRailHeight]]

YRailBoltHoles = [[YRail[0][0]+NutHoleOffset,YRail[1][1]-MDF/2],\
              	   [YRail[1][0]/2,YRail[1][1]-MDF/2],\
              	   [YRail[1][0]-NutHoleOffset,YRail[1][1]-MDF/2],\
              	   [YRail[0][0]+NutHoleOffset,YRail[0][0]+MDF/2],\
              	   [YRail[1][0]/2,YRail[0][0]+MDF/2],\
              	   [YRail[1][0]-NutHoleOffset,YRail[0][0]+MDF/2]]

YRailNutHoles =  [[YRail[0][0]+NutHoleOffset,YRail[1][1]/2],\
              	  [YRail[1][0]-NutHoleOffset,YRail[1][1]/2]]


print 'Y Rail piece'
print 'Make a rectangle from ' + str(YRail[0]) + 'to ' + str(YRail[1]) + '.'

for x in range(len(YRailBoltHoles)):
	print 'Make a circle of radius ' + str(BoltRadius) + ' at ' + str(YRailBoltHoles[x]) + '.'

for x in range(len(YRailNutHoles)):
	print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(YRailNutHoles[x]) + '.'
print ' '
print ' '


#	draw Y top and bottom middle pieces
YRailTopBottom = [[0,0] , [YRailLength,YRailDepth]]

YRailNutHoles = [[YRailTopBottom[0][0]+NutHoleOffset,YRailTopBottom[1][1]-NutHoleOffset],\
              	   [YRailTopBottom[1][0]/2,YRailTopBottom[1][1]-NutHoleOffset],\
              	   [YRailTopBottom[1][0]-NutHoleOffset,YRailTopBottom[1][1]-NutHoleOffset],\
              	   [YRailTopBottom[0][0]+NutHoleOffset,YRailTopBottom[0][1]+NutHoleOffset],\
              	   [YRailTopBottom[1][0]-NutHoleOffset,YRailTopBottom[0][1]+NutHoleOffset]]


print 'Y Rail Top and Bottom pieces (Make Two)'
print 'Make a rectangle from ' + str(YRailTopBottom[0]) + 'to ' + str(YRailTopBottom[1]) + '.'

for x in range(len(YRailNutHoles)):
	print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(YRailNutHoles[x]) + '.'
print ' '
print ' '




#
#	draw X gantry pieces (2)
#		calculate everything so the router bit sits at the edge of the rail bearings.
#		assume the rail support is 50mm thick.
#		XGantryHeight,XGantryWidth,XGantryTopBearingY,XGantryBottomBearingY,XGantryBearingXLeft,
#		MotorBeltHole, TightenerBeltHole,
#		XGantryBearingXRight,XGantryLowerRightYRailCorner all calculated above


XGantry = [[0,0] , [XGantryWidth,XGantryHeight]]

#bolt holes for the bearings that ride on top of X rail.
XGantryBearingBoltHoles = [[XGantryBearingXLeft,XGantryTopBearingY],\
              	   	   [XGantryBearingXRight,XGantryTopBearingY]]

#Bolt holes that connect the Y Rail
XGantryBoltHoles = [[XGantryLowerRightYRailCorner[0]-MDF/2,XGantryLowerRightYRailCorner[1]+YRailHeight/2],\
              	    [XGantryLowerRightYRailCorner[0]-MDF-YRailDepth+NutHoleOffset,XGantryLowerRightYRailCorner[1]+MDF/2],\
		    [XGantryLowerRightYRailCorner[0]-MDF-YRailDepth+NutHoleOffset,XGantryLowerRightYRailCorner[1]+YRailHeight-MDF/2]]

#X axis motor holes
XMotorSpot = [XGantryLowerRightYRailCorner[0]-MDF-Nema23MotorMount/2-FudgeFactor,XGantryLowerRightYRailCorner[1]+MDF+Nema23MotorMount/2+FudgeFactor]
MotorMountHoles = [[XMotorSpot[0]-30+6.43,XMotorSpot[1]-30+6.43] , \
                   [XMotorSpot[0]-30+6.43,XMotorSpot[1]+30-6.43] , \
                   [XMotorSpot[0]+30-6.43,XMotorSpot[1]+30-6.43] , \
                   [XMotorSpot[0]+30-6.43,XMotorSpot[1]-30+6.43]] 

#bolt slidey holes for the bearings that ride on botton of rail, plus springs.
SlideyBoltHoles = [[XGantryBearingXLeft-BearingBoltRadius,XGantryBottomBearingY-SpringSpace] , \
                   [XGantryBearingXLeft+BearingBoltRadius,XGantryBottomBearingY+SpringSpace] , \
                   [XGantryBearingXRight-BearingBoltRadius,XGantryBottomBearingY-SpringSpace] , \
                   [XGantryBearingXRight+BearingBoltRadius,XGantryBottomBearingY+SpringSpace]] 

#single slider for the ilder pulley bolts
IdlerPulleyTrack = [[XGantryLowerRightYRailCorner[0]-MDF-Nema23MotorMount,MiddleOfXRail-SkateBearingBoltRadius] , \
                    [XGantryLowerRightYRailCorner[0]+Nema23MotorMount,MiddleOfXRail+SkateBearingBoltRadius]]

#hole for the belt to come through
#MotorBeltHole, TightenerBeltHole
BeltHoles = [[MotorBeltHole[0]-12,MotorBeltHole[1]] , \
	     [MotorBeltHole[0]+12,MotorBeltHole[1]+FudgeFactor] , \
	     [TightenerBeltHole[0]-12,TightenerBeltHole[1]] , \
	     [TightenerBeltHole[0]+12,TightenerBeltHole[1]+FudgeFactor]]
#These are bolt holes on either side of the belt hole, and below, to clamp the belt in with a piece of wood.
BeltHoleNutHoles = [[BeltHoles[0][0]-5,BeltHoles[0][1]-5] , \
	        [BeltHoles[1][0]+5,BeltHoles[0][1]-5] , \
		[BeltHoles[2][0]-5,BeltHoles[2][1]-5] , \
		[BeltHoles[3][0]+5,BeltHoles[2][1]-5]]


print 'X Gantry'
print 'Make a rectangle from ' + str(XGantry[0]) + 'to ' + str(XGantry[1]) + '.'

print 'Make a circle of radius ' + str(38.1/2) + ' at ' + str(XMotorSpot) + '.'
for x in range(len(MotorMountHoles)):
	print 'Make a circle of radius ' + str(5.0/2) + ' at ' + str(MotorMountHoles[x]) + '.'

for x in range(len(XGantryBearingBoltHoles)):
	print 'Make a circle of radius ' + str(BearingBoltRadius) + ' at ' + str(XGantryBearingBoltHoles[x]) + '.'

for x in range(len(XGantryBoltHoles)):
	print 'Make a circle of radius ' + str(BoltRadius) + ' at ' + str(XGantryBoltHoles[x]) + '.'

for x in range(len(BeltHoleNutHoles)):
	print 'Make a circle of radius ' + str(BoltRadius) + ' at ' + str(BeltHoleNutHoles[x]) + '.'

for x in range(0, len(SlideyBoltHoles), 2):
	print 'Make a rectangle from ' + str(SlideyBoltHoles[x]) + ' to ' + str(SlideyBoltHoles[x+1]) + '.'

for x in range(0, len(BeltHoles), 2):
	print 'Make a rectangle from ' + str(BeltHoles[x]) + ' to ' + str(BeltHoles[x+1]) + '.'

for x in range(0, len(IdlerPulleyTrack), 2):
	print 'Make a rectangle from ' + str(IdlerPulleyTrack[x]) + ' to ' + str(IdlerPulleyTrack[x+1]) + '.'

print ' '
print ' '



#
#	If they need a table
#		draw end caps (2)
#
#		draw X rails (2)
#
#		draw outside pieces (2)
#
#		draw inside pieces (2)


#Table Notes: No fudge room on the table! If someone wants extra room for clamps, they need to ask for it in X/Y/Z travel space. I don't know what they'll want for clamp space and it's a PITA for both of us to try to work through programmed in assumptions. 





if Table == "n":  #they do not have a table, we need to make one


    # X rail supports
    #XRailThickness = 50 This is thickness of the piece of wood the X rails sits on.
    

    LowerCorner = [0,0]
    UpperCorner = [XTravel+XGantryWidth,XRailThickness]

    BoltHoles = [[LowerCorner[0]+NutHoleOffset,25] , \
                [UpperCorner[0]/4,25] , \
                [UpperCorner[0]/2,25] , \
                [UpperCorner[0]*3/4,25] , \
                [UpperCorner[0]-NutHoleOffset,25]] 


    print ' '
    print ' '
    print ' '
    print 'X Axis Rail - You need two of these.'
    print 'Lower corner at ' + str(LowerCorner) + '.'
    print 'Upper corner at ' + str(UpperCorner) + '.'
    # bolt holes
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[0]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[1]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[2]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[3]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[4]) + '.'


    print 'Remember, you need two of these, Copy and Paste.'




    # Endcap
    #	~6"(150mm) tall, thicker is better, but more expensive, as long as it needs to be for Y travel
    #	2 rails in middle, put them at 1/3 and 2/3 distance.
    #	Put on stick out bits to lash the belts to. give 50mm for that.
    #       This is held up to the rail for dimensions.

    LowerCorner = [YRail[0][0]-MDF-50,0]
    UpperCorner = [YRail[1][0]+MDF+50,25*6]

    BeltSpot = [[LowerCorner[0]+50,UpperCorner[1]-Rail-25-SkateBearingRadius],\
                [LowerCorner[0]+50-25.4,UpperCorner[1]-Rail-25-SkateBearingRadius-10],\
                [UpperCorner[0]-50,UpperCorner[1]-Rail-25-SkateBearingRadius],\
                [UpperCorner[0]-50+25.4,UpperCorner[1]-Rail-25-SkateBearingRadius-10]]
    # These go inside left, outside left, inside right, outside right. That's not my normal order. Sorry

    BeltSpotBoltHoles = [[BeltSpot[1][0]-QuarterInch,BeltSpot[0][1]+QuarterInch],\
                        [BeltSpot[0][0]+QuarterInch,BeltSpot[0][1]+QuarterInch],\
                         [BeltSpot[2][0]-QuarterInch,BeltSpot[2][1]+QuarterInch],\
                         [BeltSpot[3][0]-QuarterInch,BeltSpot[2][1]+QuarterInch]]

    BoltHoles = [[YRail[0][0]+BearingAssyToRail+MDF+MDF/2,NutHoleOffset] , \
                [YRail[0][0]+BearingAssyToRail+MDF+MDF/2,UpperCorner[1]/2] , \
                [YRail[0][0]+BearingAssyToRail+MDF+MDF/2,UpperCorner[1]-NutHoleOffset] , \
                \
                [YRail[1][0]/3,UpperCorner[1]/2] , \
                [YRail[1][0]/3,UpperCorner[1]-NutHoleOffset-25],\
                \
                [YRail[1][0]*2/3,UpperCorner[1]/2] , \
                [YRail[1][0]*2/3,UpperCorner[1]-NutHoleOffset-25],\
                \
                [YRail[1][0]-BearingAssyToRail-MDF-MDF/2,NutHoleOffset] , \
                [YRail[1][0]-BearingAssyToRail-MDF-MDF/2-MDF/2,UpperCorner[1]/2] , \
                [YRail[1][0]-BearingAssyToRail-MDF-MDF/2-MDF/2,UpperCorner[1]-NutHoleOffset]] 


    print ' '
    print ' '
    print ' '
    print 'Endcap - You need two of these.'
    print 'Lower corner at ' + str(LowerCorner) + '.'

    print 'Upper corner at ' + str(UpperCorner) + '.'
    # Bolt holes
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[0]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[1]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[2]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[3]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[4]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[5]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[6]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[7]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[8]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[9]) + '.'

    # Belt holes
    print 'Make a rectangle from ' + str(BeltSpot[0]) + ' to ' + str(BeltSpot[1]) + '.'
    print 'Make a rectangle from ' + str(BeltSpot[2]) + ' to ' + str(BeltSpot[3]) + '.'
    # Belt Spot Bolt holes
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BeltSpotBoltHoles[0]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BeltSpotBoltHoles[1]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BeltSpotBoltHoles[2]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BeltSpotBoltHoles[3]) + '.'



    print 'Remember, you need two of these, Copy and Paste.'









    # X side
    #	~6"(150mm) tall, as long as it needs to be for X travel
    #       Note! The top of the rail is meant to be flush with the side. Easier postitioning calculations...
    #	bolt holes for rail. 
    #	nut holes for endcap connection
    #	Leave an extra half inch on each side for cutting the table. 

    LowerCorner = [0,0]
    UpperCorner = [XTravel+XGantryWidth,25*6]

    NutHoles = [[LowerCorner[0]+NutHoleOffset,LowerCorner[1]+NutHoleOffset] , \
             [LowerCorner[0]+NutHoleOffset,UpperCorner[1]/2] , \
             [LowerCorner[0]+NutHoleOffset,UpperCorner[1]-NutHoleOffset] , \
             [UpperCorner[0]-NutHoleOffset,LowerCorner[1]+NutHoleOffset] , \
             [UpperCorner[0]-NutHoleOffset,UpperCorner[1]/2] , \
            [UpperCorner[0]-NutHoleOffset,UpperCorner[1]-NutHoleOffset]] 

    BoltHoles = [[LowerCorner[0]+NutHoleOffset,UpperCorner[1]-Rail-25] , \
            [UpperCorner[0]/4,UpperCorner[1]-Rail-25] , \
            [UpperCorner[0]*2/4,UpperCorner[1]-Rail-25] , \
            [UpperCorner[0]*3/4,UpperCorner[1]-Rail-25] , \
            [UpperCorner[0]-NutHoleOffset,UpperCorner[1]-Rail-25]] \


    print ' '
    print ' '
    print ' '
    print 'X side - You need two of these.'
    print 'Lower corner at ' + str(LowerCorner) + '.'
    print 'Upper corner at ' + str(UpperCorner) + '.'
    # nut holes
    print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(NutHoles[0]) + '.'
    print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(NutHoles[1]) + '.'
    print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(NutHoles[2]) + '.'
    print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(NutHoles[3]) + '.'
    print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(NutHoles[4]) + '.'
    print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(NutHoles[5]) + '.'
    # bolt holes
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[0]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[1]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[2]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[3]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[4]) + '.'

    print 'Remember, you need two of these, Copy and Paste.'





    # X internal table supports
    #	as long as it needs to be for X travel
    #	keep bolt holes for rail, in case someone wants to extend them for extra stability. 
    #	Nix the end bolt holes though. They're in the way. Someone else may want them though.... leave code.
    #	nut holes for endcap connection


    PropogatedUpperCorner = [XTravel+XGantryWidth,25.4*12]  # From X side
    LowerCorner = [0,PropogatedUpperCorner[1]-6*25-MDF]
    UpperCorner = [PropogatedUpperCorner[0],PropogatedUpperCorner[1]-25.4]

    NutHoles = [[LowerCorner[0]+NutHoleOffset,LowerCorner[1]+NutHoleOffset] , \
             [LowerCorner[0]+NutHoleOffset,UpperCorner[1]-NutHoleOffset] , \
             [UpperCorner[0]-NutHoleOffset,LowerCorner[1]+NutHoleOffset] , \
             [UpperCorner[0]-NutHoleOffset,UpperCorner[1]-NutHoleOffset]] 

    BoltHoles = [[LowerCorner[0]+NutHoleOffset,PropogatedUpperCorner[1]-Rail-25] , \
            [UpperCorner[0]/4,PropogatedUpperCorner[1]-Rail-25] , \
            [UpperCorner[0]*2/4,PropogatedUpperCorner[1]-Rail-25] , \
            [UpperCorner[0]*3/4,PropogatedUpperCorner[1]-Rail-25] , \
            [UpperCorner[0]-NutHoleOffset,PropogatedUpperCorner[1]-Rail-25]] \

    print ' '
    print ' '
    print ' '
    print 'X internal table supports - You need two of these.'
    print 'Lower corner at ' + str(LowerCorner) + '.'
    print 'Upper corner at ' + str(UpperCorner) + '.'
    # nut holes
    print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(NutHoles[0]) + '.'
    print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(NutHoles[1]) + '.'
    print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(NutHoles[2]) + '.'
    print 'Make a circle of radius ' + str(NutHoleRadius) + ' at ' + str(NutHoles[3]) + '.'
    # bolt holes
    # see comments. print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[0]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[1]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[2]) + '.'
    print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[3]) + '.'
    # see comments. print 'Make a circle of radius ' + str(QuarterInch/2) + ' at ' + str(BoltHoles[4]) + '.'

    print 'Remember, you need two of these, Copy and Paste.'

